00:07:50  Namespace(bound=128, cincr=False, cutoff=9223372036854775807, dot='locked-bursts-12', incr=False, ltl=<_io.TextIOWrapper name='./bench/locked-bursts.ltl' mode='r' encoding='UTF-8'>, mealy=True, moore=True, opt='sync_hub', previous=None, size=0, startsize=12, tmp=True, verbose=2, weakag=True)
00:07:50  temp file prefix used is /home/art_haali/projects/party/src/zero-process/tmp_ofxde
00:07:50  the spec read is: 
#variable 'active' is always present
#variable 'tok' is always present

# next operators here work also if do not rewrite them into local versions (atm, Party does not support rewriting)

[INPUT_VARIABLES]
# hready,hburst[0,1] are really global variables 

# incr is:  hburst0,1 = 0,1
# burst is: hburst0,1 = 1,1 
# non-incr, non-burst means 'single' 
hready;
hbusreq;
hburst0;
hburst1;
hlock;
noreq;


[OUTPUT_VARIABLES]
# hmastlock,hmaster[0..n],locked,decide,start are really global variables
# all except hmaster can be modeled as an "or" over local variables
# hmaster can be modeled as a special variable that gives the value/id of the unique process for which local variable is high
# in this variant, we LOCALIZE all auxiliary variables 
hmastlock;
hmaster;
hgrant;
start;
decide;
locked;


[ASSUMPTIONS]
# A1: hbusreq is eventually lowered  # active is needed here -- otherwise hbusreq is lowered but we will not react to it
Forall (i) G ( (hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * hmaster_i=1) -> X(F(hbusreq_i=0 * active_i=1)) );

# A2: hready will eventually be high and visible
Forall (i) G (F (hready_i=1 * active_i=1));

# A3: hlock is low if hbusreq is low
Forall (i) G ((hlock_i=1) -> (hbusreq_i=1));

# A4: initial inputs are all low 
Forall (i) (hbusreq_i=0) * (hlock_i=0) * (hready_i=0);


# new global variable: works in case of 
Forall (i) G (hbusreq_i=1 -> noreq_i=0);

# might make sense when they interleave
# Forall (i) G (F(noreq_i=0 * hready_i=1));


######## SHORTCUT TO REMOVE SOME OF GUARANTEES  ######

# Forall (i) G (noreq_i=0);

# Forall (i) X(G(hready_i=1));

# Forall (i) X(G(hbusreq_i=1));

Forall (i) G(hburst0_i=1);
Forall (i) G(hburst1_i=1);

# Forall (i) X(G(hlock_i=1));
Forall (i) G(hbusreq_i=1 -> hlock_i=1);



[GUARANTEES]

# G1: start is never high when hready is low
Forall (i) 
G ((hready_i=0 * active_i=1) -> X (start_i=0));

# G2: incremental bursts last until hbusreq is lowered
Forall (i) 
G ((hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * start_i=1 * active_i=1) 
  -> 
  X ((start_i=0) W (start_i=0 * hbusreq_i=0 * active_i=1)));


# G3: burst4 lasts until we have seen 3/4 hready signals
Forall (i)
G ((hmastlock_i=1 * hburst0_i=1 * hburst1_i=1 * start_i=1 * hready_i=1 * active_i=1) 
  ->
  X(
    (start_i=0) W 
            (start_i=0 * hready_i=1 * active_i=1 * X((start_i=0) W 
            (start_i=0 * hready_i=1 * active_i=1 * X((start_i=0) W 
            (start_i=0 * hready_i=1 * active_i=1)))))
   )
  );

Forall (i)
G ((hmastlock_i=1 * hburst0_i=1 * hburst1_i=1 * start_i=1 * hready_i=0 * active_i=1) 
  ->
  X(
    (start_i=0) W 
            (start_i=0 * hready_i=1 * active_i=1 * X((start_i=0) W 
            (start_i=0 * hready_i=1 * active_i=1 * X((start_i=0) W 
            (start_i=0 * hready_i=1 * active_i=1 * X((start_i=0) W 
            (start_i=0 * hready_i=1 * active_i=1)))))))
   )
  );




# G4: update hmaster on hready 
Forall (i) G ((hready_i=1 * active_i=1) -> ((hgrant_i=1) <-> X(hmaster_i=1)));

# G5: update locked on hready
Forall (i) G ((hready_i=1 * active_i=1) -> ((locked_i=1) <-> X(hmastlock_i=1)));

# G6: set start if we change hmaster or hmastlock 
Forall (i) G (X(start_i=0) -> ((hmaster_i=1) <-> X(hmaster_i=1)));
Forall (i) G (X(start_i=0) -> ((hmastlock_i=1) <-> X(hmastlock_i=1)));

# G7: if we give a new hgrant, need to update locked with input hlock 
# we need active_i here, otherwise -- hlock can arrive when not scheduled and hence at the next moment there will be no way to recall what was hlock atm before
Forall (i) G ((decide_i=1 * active_i=1 * X(hgrant_i=1)) -> ((hlock_i=1) <-> X(locked_i=1)));

# G8: set decide if we change hgrant or locked   # not sure if need active_i here 
Forall (i) G ((decide_i=0 * active_i=1) -> (hgrant_i=1 <-> X(hgrant_i=1))); 
Forall (i) G ((decide_i=0 * active_i=1) -> (locked_i=1 <-> X(locked_i=1))); 

# G9: every hbusreq is either lowered or answered  # no need for active here because either: 
                                                   # - req goes low (and we haven't noticed these reqs at all), or 
                                                   # - req stays high till req*active, which should be granted -- also possible that then req is lowered but then again -- either it stays low till we notice it, or it goes down when !active and up when active, but then we need to grant it 
Forall (i) G (hbusreq_i=1 -> F(hbusreq_i=0 + hmaster_i=1));

# G10: no grants without requests (without exception for now)    # put active here just in case
# (exception can be modeled with additional input "no_hbusreq" and synthesis of a special process template for process 0)
# Forall (i) G (hgrant_i=0 -> ((hgrant_i=0) W (active_i=1 * hbusreq_i=1)));

# G10 for 0-process:
# Forall (i) G(decide_i=1 * noreq_i=1 * prev_i=1 -> X(hgrant_i=1));
Forall (i) G(noreq_i=1 * prev_i=1 -> X(hgrant_i=1));


# G11: initial output values:
# modified -- removed start, decide
# Forall (i) (hgrant_i=0 * hmaster_i=0 * hmastlock_i=0);

# G11 for the 0-process
Forall (i) (tok_i=1 -> hgrant_i=1 * hmaster_i=1 * hmastlock_i=0);
Forall (i) (tok_i=0 -> hgrant_i=0 * hmaster_i=0 * hmastlock_i=0);

# additional token guarantee: only give hgrant if we have token
Forall (i) G (hgrant_i=1 -> tok_i=1);

00:07:50  parsing input spec..
00:07:50  strengthening properties..
00:07:50  Ltl2UCW: converting..(non-negated version)
(G((((((hmastlock_i=1) * (hburst0_i=0)) * (hburst1_i=1)) * (hmaster_i=1)) -> (X((F(((hbusreq_i=0) * (active_i=1)))))))))
00:07:50  never { /* !(G(((((hmastlock_i) && (!hburst0_i)) && (hburst1_i)) && (hmaster_i)) -> (X(F((!hbusreq_i) && (active_i)))))) */
T0_init:
	if
	:: (!hburst0_i && hmaster_i && hmastlock_i && hburst1_i) -> goto accept_S2
	:: (1) -> goto T0_init
	fi;
accept_S2:
	if
	:: (!active_i) || (active_i && hbusreq_i) -> goto accept_S2
	fi;
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(G((F(((hready_i=1) * (active_i=1))))))
00:07:50  never { /* !(G(F((hready_i) && (active_i)))) */
T0_init:
	if
	:: (1) -> goto T0_init
	:: (!active_i) || (active_i && !hready_i) -> goto accept_S2
	fi;
accept_S2:
	if
	:: (!active_i) || (active_i && !hready_i) -> goto accept_S2
	fi;
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(G(((hlock_i=1) -> (hbusreq_i=1))))
00:07:50  never { /* !(G((hlock_i) -> (hbusreq_i))) */
T0_init:
	if
	:: (!hbusreq_i && !hlock_i) || (hbusreq_i) -> goto T0_init
	:: (!hbusreq_i && hlock_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(hbusreq_i=0)
00:07:50  never { /* !(!hbusreq_i) */
accept_init:
	if
	:: (hbusreq_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(hlock_i=0)
00:07:50  never { /* !(!hlock_i) */
accept_init:
	if
	:: (hlock_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(hready_i=0)
00:07:50  never { /* !(!hready_i) */
accept_init:
	if
	:: (hready_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(G(((hbusreq_i=1) -> (noreq_i=0))))
00:07:50  never { /* !(G((hbusreq_i) -> (!noreq_i))) */
T0_init:
	if
	:: (!hbusreq_i) || (hbusreq_i && !noreq_i) -> goto T0_init
	:: (hbusreq_i && noreq_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(G((hburst0_i=1)))
00:07:50  never { /* !(G(hburst0_i)) */
T0_init:
	if
	:: (hburst0_i) -> goto T0_init
	:: (!hburst0_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(G((hburst1_i=1)))
00:07:50  never { /* !(G(hburst1_i)) */
T0_init:
	if
	:: (hburst1_i) -> goto T0_init
	:: (!hburst1_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(G(((hbusreq_i=1) -> (hlock_i=1))))
00:07:50  never { /* !(G((hbusreq_i) -> (hlock_i))) */
T0_init:
	if
	:: (!hlock_i && !hbusreq_i) || (hlock_i) -> goto T0_init
	:: (!hlock_i && hbusreq_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(G((F((fair_scheduling_i=1)))))
00:07:50  never { /* !(G(F(fair_scheduling_i))) */
T0_init:
	if
	:: (1) -> goto T0_init
	:: (!fair_scheduling_i) -> goto accept_S2
	fi;
accept_S2:
	if
	:: (!fair_scheduling_i) -> goto accept_S2
	fi;
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(G((F((tok_i=1)))))
00:07:50  never { /* !(G(F(tok_i))) */
T0_init:
	if
	:: (1) -> goto T0_init
	:: (!tok_i) -> goto accept_S2
	fi;
accept_S2:
	if
	:: (!tok_i) -> goto accept_S2
	fi;
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(G((((hready_i=0) * (active_i=1)) -> (X((start_i=0))))))
00:07:50  never { /* !(G(((!hready_i) && (active_i)) -> (X(!start_i)))) */
T0_init:
	if
	:: (1) -> goto T0_init
	:: (!hready_i && active_i) -> goto accept_S2
	fi;
accept_S2:
	if
	:: (start_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(G(((((((hmastlock_i=1) * (hburst0_i=0)) * (hburst1_i=1)) * (start_i=1)) * (active_i=1)) -> (X((((start_i=0) U (((start_i=0) * (hbusreq_i=0)) * (active_i=1))) + (G((start_i=0)))))))))
00:07:50  never { /* !(G((((((hmastlock_i) && (!hburst0_i)) && (hburst1_i)) && (start_i)) && (active_i)) -> (X(((!start_i) U (((!start_i) && (!hbusreq_i)) && (active_i))) || (G(!start_i)))))) */
T0_init:
	if
	:: (1) -> goto T0_init
	:: (!hburst0_i && start_i && active_i && hburst1_i && hmastlock_i) -> goto T0_S2
	fi;
T0_S2:
	if
	:: (!start_i && !active_i) || (!start_i && active_i && hbusreq_i) -> goto T0_S2
	:: (start_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(G((((((((hmastlock_i=1) * (hburst0_i=1)) * (hburst1_i=1)) * (start_i=1)) * (hready_i=1)) * (active_i=1)) -> (X((((start_i=0) U ((((start_i=0) * (hready_i=1)) * (active_i=1)) * (X((((start_i=0) U ((((start_i=0) * (hready_i=1)) * (active_i=1)) * (X((((start_i=0) U (((start_i=0) * (hready_i=1)) * (active_i=1))) + (G((start_i=0)))))))) + (G((start_i=0)))))))) + (G((start_i=0)))))))))
00:07:50  never { /* !(G(((((((hmastlock_i) && (hburst0_i)) && (hburst1_i)) && (start_i)) && (hready_i)) && (active_i)) -> (X(((!start_i) U ((((!start_i) && (hready_i)) && (active_i)) && (X(((!start_i) U ((((!start_i) && (hready_i)) && (active_i)) && (X(((!start_i) U (((!start_i) && (hready_i)) && (active_i))) || (G(!start_i)))))) || (G(!start_i)))))) || (G(!start_i)))))) */
T0_init:
	if
	:: (1) -> goto T0_init
	:: (start_i && active_i && hready_i && hburst0_i && hmastlock_i && hburst1_i) -> goto T0_S2
	fi;
T0_S2:
	if
	:: (!start_i && !active_i) || (!start_i && active_i && !hready_i) -> goto T0_S2
	:: (start_i) -> goto accept_all
	:: (!start_i && active_i && hready_i) -> goto T0_S4
	fi;
T0_S4:
	if
	:: (start_i) -> goto accept_all
	:: (!start_i && !active_i) || (!start_i && active_i && !hready_i) -> goto T0_S4
	:: (!start_i && active_i && hready_i) -> goto T0_S6
	fi;
T0_S6:
	if
	:: (start_i) -> goto accept_all
	:: (!start_i && !active_i) || (!start_i && active_i && !hready_i) -> goto T0_S6
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(G((((((((hmastlock_i=1) * (hburst0_i=1)) * (hburst1_i=1)) * (start_i=1)) * (hready_i=0)) * (active_i=1)) -> (X((((start_i=0) U ((((start_i=0) * (hready_i=1)) * (active_i=1)) * (X((((start_i=0) U ((((start_i=0) * (hready_i=1)) * (active_i=1)) * (X((((start_i=0) U ((((start_i=0) * (hready_i=1)) * (active_i=1)) * (X((((start_i=0) U (((start_i=0) * (hready_i=1)) * (active_i=1))) + (G((start_i=0)))))))) + (G((start_i=0)))))))) + (G((start_i=0)))))))) + (G((start_i=0)))))))))
00:07:50  never { /* !(G(((((((hmastlock_i) && (hburst0_i)) && (hburst1_i)) && (start_i)) && (!hready_i)) && (active_i)) -> (X(((!start_i) U ((((!start_i) && (hready_i)) && (active_i)) && (X(((!start_i) U ((((!start_i) && (hready_i)) && (active_i)) && (X(((!start_i) U ((((!start_i) && (hready_i)) && (active_i)) && (X(((!start_i) U (((!start_i) && (hready_i)) && (active_i))) || (G(!start_i)))))) || (G(!start_i)))))) || (G(!start_i)))))) || (G(!start_i)))))) */
T0_init:
	if
	:: (1) -> goto T0_init
	:: (!hready_i && start_i && active_i && hburst0_i && hmastlock_i && hburst1_i) -> goto T0_S2
	fi;
T0_S2:
	if
	:: (!hready_i && !start_i) || (hready_i && !start_i && !active_i) -> goto T0_S2
	:: (start_i) -> goto accept_all
	:: (hready_i && !start_i && active_i) -> goto T0_S4
	fi;
T0_S4:
	if
	:: (start_i) -> goto accept_all
	:: (!hready_i && !start_i) || (hready_i && !start_i && !active_i) -> goto T0_S4
	:: (hready_i && !start_i && active_i) -> goto T0_S6
	fi;
T0_S6:
	if
	:: (start_i) -> goto accept_all
	:: (!hready_i && !start_i) || (hready_i && !start_i && !active_i) -> goto T0_S6
	:: (hready_i && !start_i && active_i) -> goto T0_S8
	fi;
T0_S8:
	if
	:: (start_i) -> goto accept_all
	:: (!hready_i && !start_i) || (hready_i && !start_i && !active_i) -> goto T0_S8
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(G((((hready_i=1) * (active_i=1)) -> ((hgrant_i=1) <-> (X((hmaster_i=1)))))))
00:07:50  never { /* !(G(((hready_i) && (active_i)) -> ((hgrant_i) <-> (X(hmaster_i))))) */
T0_init:
	if
	:: (1) -> goto T0_init
	:: (active_i && hready_i && hgrant_i) -> goto accept_S2
	:: (active_i && hready_i && !hgrant_i) -> goto accept_S3
	fi;
accept_S3:
	if
	:: (hmaster_i) -> goto accept_all
	fi;
accept_S2:
	if
	:: (!hmaster_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(G((((hready_i=1) * (active_i=1)) -> ((locked_i=1) <-> (X((hmastlock_i=1)))))))
00:07:50  never { /* !(G(((hready_i) && (active_i)) -> ((locked_i) <-> (X(hmastlock_i))))) */
T0_init:
	if
	:: (1) -> goto T0_init
	:: (active_i && hready_i && locked_i) -> goto accept_S2
	:: (active_i && hready_i && !locked_i) -> goto accept_S3
	fi;
accept_S3:
	if
	:: (hmastlock_i) -> goto accept_all
	fi;
accept_S2:
	if
	:: (!hmastlock_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(G(((X((start_i=0))) -> ((hmaster_i=1) <-> (X((hmaster_i=1)))))))
00:07:50  never { /* !(G((X(!start_i)) -> ((hmaster_i) <-> (X(hmaster_i))))) */
T0_init:
	if
	:: (1) -> goto T0_init
	:: (hmaster_i) -> goto accept_S2
	:: (!hmaster_i) -> goto accept_S3
	fi;
accept_S3:
	if
	:: (!start_i && hmaster_i) -> goto accept_all
	fi;
accept_S2:
	if
	:: (!start_i && !hmaster_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(G(((X((start_i=0))) -> ((hmastlock_i=1) <-> (X((hmastlock_i=1)))))))
00:07:50  never { /* !(G((X(!start_i)) -> ((hmastlock_i) <-> (X(hmastlock_i))))) */
T0_init:
	if
	:: (1) -> goto T0_init
	:: (hmastlock_i) -> goto accept_S2
	:: (!hmastlock_i) -> goto accept_S3
	fi;
accept_S3:
	if
	:: (!start_i && hmastlock_i) -> goto accept_all
	fi;
accept_S2:
	if
	:: (!start_i && !hmastlock_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(G(((((decide_i=1) * (active_i=1)) * (X((hgrant_i=1)))) -> ((hlock_i=1) <-> (X((locked_i=1)))))))
00:07:50  never { /* !(G((((decide_i) && (active_i)) && (X(hgrant_i))) -> ((hlock_i) <-> (X(locked_i))))) */
T0_init:
	if
	:: (1) -> goto T0_init
	:: (decide_i && hlock_i && active_i) -> goto accept_S2
	:: (decide_i && !hlock_i && active_i) -> goto accept_S3
	fi;
accept_S3:
	if
	:: (hgrant_i && locked_i) -> goto accept_all
	fi;
accept_S2:
	if
	:: (hgrant_i && !locked_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(G((((decide_i=0) * (active_i=1)) -> ((hgrant_i=1) <-> (X((hgrant_i=1)))))))
00:07:50  never { /* !(G(((!decide_i) && (active_i)) -> ((hgrant_i) <-> (X(hgrant_i))))) */
T0_init:
	if
	:: (1) -> goto T0_init
	:: (!decide_i && hgrant_i && active_i) -> goto accept_S2
	:: (!decide_i && !hgrant_i && active_i) -> goto accept_S3
	fi;
accept_S3:
	if
	:: (hgrant_i) -> goto accept_all
	fi;
accept_S2:
	if
	:: (!hgrant_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(G((((decide_i=0) * (active_i=1)) -> ((locked_i=1) <-> (X((locked_i=1)))))))
00:07:50  never { /* !(G(((!decide_i) && (active_i)) -> ((locked_i) <-> (X(locked_i))))) */
T0_init:
	if
	:: (1) -> goto T0_init
	:: (!decide_i && locked_i && active_i) -> goto accept_S2
	:: (!decide_i && !locked_i && active_i) -> goto accept_S3
	fi;
accept_S3:
	if
	:: (locked_i) -> goto accept_all
	fi;
accept_S2:
	if
	:: (!locked_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(G(((hbusreq_i=1) -> (F(((hbusreq_i=0) + (hmaster_i=1)))))))
00:07:50  never { /* !(G((hbusreq_i) -> (F((!hbusreq_i) || (hmaster_i))))) */
T0_init:
	if
	:: (1) -> goto T0_init
	:: (!hmaster_i && hbusreq_i) -> goto accept_S2
	fi;
accept_S2:
	if
	:: (!hmaster_i && hbusreq_i) -> goto accept_S2
	fi;
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(G((((noreq_i=1) * (prev_i=1)) -> (X((hgrant_i=1))))))
00:07:50  never { /* !(G(((noreq_i) && (prev_i)) -> (X(hgrant_i)))) */
T0_init:
	if
	:: (1) -> goto T0_init
	:: (noreq_i && prev_i) -> goto accept_S2
	fi;
accept_S2:
	if
	:: (!hgrant_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
((tok_i=1) -> (((hgrant_i=1) * (hmaster_i=1)) * (hmastlock_i=0)))
00:07:50  never { /* !((tok_i) -> (((hgrant_i) && (hmaster_i)) && (!hmastlock_i))) */
accept_init:
	if
	:: (tok_i && !hgrant_i) || (tok_i && hgrant_i && !hmaster_i) || (tok_i && hgrant_i && hmaster_i && hmastlock_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
((tok_i=0) -> (((hgrant_i=0) * (hmaster_i=0)) * (hmastlock_i=0)))
00:07:50  never { /* !((!tok_i) -> (((!hgrant_i) && (!hmaster_i)) && (!hmastlock_i))) */
accept_init:
	if
	:: (!tok_i && !hgrant_i && !hmaster_i && hmastlock_i) || (!tok_i && !hgrant_i && hmaster_i) || (!tok_i && hgrant_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(G(((hgrant_i=1) -> (tok_i=1))))
00:07:50  never { /* !(G((hgrant_i) -> (tok_i))) */
T0_init:
	if
	:: (!tok_i && !hgrant_i) || (tok_i) -> goto T0_init
	:: (!tok_i && hgrant_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(G(((tok_i=1) -> (F((sends_i=1))))))
00:07:50  never { /* !(G((tok_i) -> (F(sends_i)))) */
T0_init:
	if
	:: (1) -> goto T0_init
	:: (!sends_i && tok_i) -> goto accept_S2
	fi;
accept_S2:
	if
	:: (!sends_i) -> goto accept_S2
	fi;
}

00:07:50  parse_ltl2ba_ba
00:07:50  strengthening resulted in safety part (a_s -> g_s):
  (SpecProperty: 
	assumptions=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1)], 
	  guarantees=[Forall(i) G(hready_i=0 * active_i=1 -> X(start_i=0))])  
  (SpecProperty: 
	assumptions=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1)], 
	  guarantees=[Forall(i) G(hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * start_i=1 * active_i=1 -> X(start_i=0 W start_i=0 * hbusreq_i=0 * active_i=1))])  
  (SpecProperty: 
	assumptions=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1)], 
	  guarantees=[Forall(i) G(hmastlock_i=1 * hburst0_i=1 * hburst1_i=1 * start_i=1 * hready_i=1 * active_i=1 -> X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1))))])  
  (SpecProperty: 
	assumptions=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1)], 
	  guarantees=[Forall(i) G(hmastlock_i=1 * hburst0_i=1 * hburst1_i=1 * start_i=1 * hready_i=0 * active_i=1 -> X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1)))))])  
  (SpecProperty: 
	assumptions=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1)], 
	  guarantees=[Forall(i) G(hready_i=1 * active_i=1 -> hgrant_i=1 <-> X(hmaster_i=1))])  
  (SpecProperty: 
	assumptions=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1)], 
	  guarantees=[Forall(i) G(hready_i=1 * active_i=1 -> locked_i=1 <-> X(hmastlock_i=1))])  
  (SpecProperty: 
	assumptions=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1)], 
	  guarantees=[Forall(i) G(X(start_i=0) -> hmaster_i=1 <-> X(hmaster_i=1))])  
  (SpecProperty: 
	assumptions=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1)], 
	  guarantees=[Forall(i) G(X(start_i=0) -> hmastlock_i=1 <-> X(hmastlock_i=1))])  
  (SpecProperty: 
	assumptions=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1)], 
	  guarantees=[Forall(i) G(decide_i=1 * active_i=1 * X(hgrant_i=1) -> hlock_i=1 <-> X(locked_i=1))])  
  (SpecProperty: 
	assumptions=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1)], 
	  guarantees=[Forall(i) G(decide_i=0 * active_i=1 -> hgrant_i=1 <-> X(hgrant_i=1))])  
  (SpecProperty: 
	assumptions=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1)], 
	  guarantees=[Forall(i) G(decide_i=0 * active_i=1 -> locked_i=1 <-> X(locked_i=1))])  
  (SpecProperty: 
	assumptions=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1)], 
	  guarantees=[Forall(i) G(noreq_i=1 * prev_i=1 -> X(hgrant_i=1))])  
  (SpecProperty: 
	assumptions=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1)], 
	  guarantees=[Forall(i) tok_i=1 -> hgrant_i=1 * hmaster_i=1 * hmastlock_i=0])  
  (SpecProperty: 
	assumptions=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1)], 
	  guarantees=[Forall(i) tok_i=0 -> hgrant_i=0 * hmaster_i=0 * hmastlock_i=0])  
  (SpecProperty: 
	assumptions=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1)], 
	  guarantees=[Forall(i) G(hgrant_i=1 -> tok_i=1)])  

00:07:50  ..and in liveness part (a_s&a_l -> g_l):
  (SpecProperty: 
	assumptions=[Forall(i) G(hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * hmaster_i=1 -> X(F(hbusreq_i=0 * active_i=1))) * G(F(hready_i=1 * active_i=1)) * G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) * G(F(fair_scheduling_i=1)) * G(F(tok_i=1))], 
	  guarantees=[Forall(i) G(hbusreq_i=1 -> F(hbusreq_i=0 + hmaster_i=1))])  
  (SpecProperty: 
	assumptions=[Forall(i) G(hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * hmaster_i=1 -> X(F(hbusreq_i=0 * active_i=1))) * G(F(hready_i=1 * active_i=1)) * G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) * G(F(fair_scheduling_i=1))], 
	  guarantees=[Forall(i) G(tok_i=1 -> F(sends_i=1))])  

00:07:50  properties after localizing:
  (SpecProperty: 
	assumptions=[True], 
	  guarantees=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) -> G(hready_i=0 * active_i=1 -> X(start_i=0))])  
  (SpecProperty: 
	assumptions=[True], 
	  guarantees=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) -> G(hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * start_i=1 * active_i=1 -> X(start_i=0 W start_i=0 * hbusreq_i=0 * active_i=1))])  
  (SpecProperty: 
	assumptions=[True], 
	  guarantees=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) -> G(hmastlock_i=1 * hburst0_i=1 * hburst1_i=1 * start_i=1 * hready_i=1 * active_i=1 -> X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1))))])  
  (SpecProperty: 
	assumptions=[True], 
	  guarantees=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) -> G(hmastlock_i=1 * hburst0_i=1 * hburst1_i=1 * start_i=1 * hready_i=0 * active_i=1 -> X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1)))))])  
  (SpecProperty: 
	assumptions=[True], 
	  guarantees=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) -> G(hready_i=1 * active_i=1 -> hgrant_i=1 <-> X(hmaster_i=1))])  
  (SpecProperty: 
	assumptions=[True], 
	  guarantees=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) -> G(hready_i=1 * active_i=1 -> locked_i=1 <-> X(hmastlock_i=1))])  
  (SpecProperty: 
	assumptions=[True], 
	  guarantees=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) -> G(X(start_i=0) -> hmaster_i=1 <-> X(hmaster_i=1))])  
  (SpecProperty: 
	assumptions=[True], 
	  guarantees=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) -> G(X(start_i=0) -> hmastlock_i=1 <-> X(hmastlock_i=1))])  
  (SpecProperty: 
	assumptions=[True], 
	  guarantees=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) -> G(decide_i=1 * active_i=1 * X(hgrant_i=1) -> hlock_i=1 <-> X(locked_i=1))])  
  (SpecProperty: 
	assumptions=[True], 
	  guarantees=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) -> G(decide_i=0 * active_i=1 -> hgrant_i=1 <-> X(hgrant_i=1))])  
  (SpecProperty: 
	assumptions=[True], 
	  guarantees=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) -> G(decide_i=0 * active_i=1 -> locked_i=1 <-> X(locked_i=1))])  
  (SpecProperty: 
	assumptions=[True], 
	  guarantees=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) -> G(noreq_i=1 * prev_i=1 -> X(hgrant_i=1))])  
  (SpecProperty: 
	assumptions=[True], 
	  guarantees=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) -> tok_i=1 -> hgrant_i=1 * hmaster_i=1 * hmastlock_i=0])  
  (SpecProperty: 
	assumptions=[True], 
	  guarantees=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) -> tok_i=0 -> hgrant_i=0 * hmaster_i=0 * hmastlock_i=0])  
  (SpecProperty: 
	assumptions=[True], 
	  guarantees=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) -> G(hgrant_i=1 -> tok_i=1)])  
  (SpecProperty: 
	assumptions=[True], 
	  guarantees=[Forall(i) G(hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * hmaster_i=1 -> X(F(hbusreq_i=0 * active_i=1))) * G(F(hready_i=1 * active_i=1)) * G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) * G(F(fair_scheduling_i=1)) * G(F(tok_i=1)) -> G(hbusreq_i=1 -> F(hbusreq_i=0 + hmaster_i=1))])  
  (SpecProperty: 
	assumptions=[True], 
	  guarantees=[Forall(i) G(hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * hmaster_i=1 -> X(F(hbusreq_i=0 * active_i=1))) * G(F(hready_i=1 * active_i=1)) * G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) * G(F(fair_scheduling_i=1)) -> G(tok_i=1 -> F(sends_i=1))])  

00:07:50  Ltl2UCW: converting..(non-negated version)
(G(((hlock_i=1) -> (hbusreq_i=1))))
00:07:50  never { /* !(G((hlock_i) -> (hbusreq_i))) */
T0_init:
	if
	:: (!hbusreq_i && !hlock_i) || (hbusreq_i) -> goto T0_init
	:: (!hbusreq_i && hlock_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(hbusreq_i=0)
00:07:50  never { /* !(!hbusreq_i) */
accept_init:
	if
	:: (hbusreq_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(hlock_i=0)
00:07:50  never { /* !(!hlock_i) */
accept_init:
	if
	:: (hlock_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(hready_i=0)
00:07:50  never { /* !(!hready_i) */
accept_init:
	if
	:: (hready_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(G(((hbusreq_i=1) -> (noreq_i=0))))
00:07:50  never { /* !(G((hbusreq_i) -> (!noreq_i))) */
T0_init:
	if
	:: (!hbusreq_i) || (hbusreq_i && !noreq_i) -> goto T0_init
	:: (hbusreq_i && noreq_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(G((hburst0_i=1)))
00:07:50  never { /* !(G(hburst0_i)) */
T0_init:
	if
	:: (hburst0_i) -> goto T0_init
	:: (!hburst0_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(G((hburst1_i=1)))
00:07:50  never { /* !(G(hburst1_i)) */
T0_init:
	if
	:: (hburst1_i) -> goto T0_init
	:: (!hburst1_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(G(((hbusreq_i=1) -> (hlock_i=1))))
00:07:50  never { /* !(G((hbusreq_i) -> (hlock_i))) */
T0_init:
	if
	:: (!hlock_i && !hbusreq_i) || (hlock_i) -> goto T0_init
	:: (!hlock_i && hbusreq_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(G((((hready_i=0) * (active_i=1)) -> (X((start_i=0))))))
00:07:50  never { /* !(G(((!hready_i) && (active_i)) -> (X(!start_i)))) */
T0_init:
	if
	:: (1) -> goto T0_init
	:: (!hready_i && active_i) -> goto accept_S2
	fi;
accept_S2:
	if
	:: (start_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  init_ass [hbusreq_i=0, hlock_i=0, hready_i=0]
00:07:50  init_gua []
00:07:50  saf_ass [G(hlock_i=1 -> hbusreq_i=1), G(hbusreq_i=1 -> noreq_i=0), G(hburst0_i=1), G(hburst1_i=1), G(hbusreq_i=1 -> hlock_i=1)]
00:07:50  saf_gua [G(hready_i=0 * active_i=1 -> X(start_i=0))]
00:07:50  liv_ass []
00:07:50  liv_gua []
00:07:50  saf_part
 []
00:07:50  Ltl2UCW: converting..(non-negated version)
(G(((((((hmastlock_i=1) * (hburst0_i=0)) * (hburst1_i=1)) * (start_i=1)) * (active_i=1)) -> (X((((start_i=0) U (((start_i=0) * (hbusreq_i=0)) * (active_i=1))) + (G((start_i=0)))))))))
00:07:50  never { /* !(G((((((hmastlock_i) && (!hburst0_i)) && (hburst1_i)) && (start_i)) && (active_i)) -> (X(((!start_i) U (((!start_i) && (!hbusreq_i)) && (active_i))) || (G(!start_i)))))) */
T0_init:
	if
	:: (1) -> goto T0_init
	:: (!hburst0_i && start_i && active_i && hburst1_i && hmastlock_i) -> goto T0_S2
	fi;
T0_S2:
	if
	:: (!start_i && !active_i) || (!start_i && active_i && hbusreq_i) -> goto T0_S2
	:: (start_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  init_ass [hbusreq_i=0, hlock_i=0, hready_i=0]
00:07:50  init_gua []
00:07:50  saf_ass [G(hlock_i=1 -> hbusreq_i=1), G(hbusreq_i=1 -> noreq_i=0), G(hburst0_i=1), G(hburst1_i=1), G(hbusreq_i=1 -> hlock_i=1)]
00:07:50  saf_gua [G(hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * start_i=1 * active_i=1 -> X(start_i=0 W start_i=0 * hbusreq_i=0 * active_i=1))]
00:07:50  liv_ass []
00:07:50  liv_gua []
00:07:50  Not all safety guarantees are of form G(bool_formulaOneNext). We will treat them with "->". 
 [G(hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * start_i=1 * active_i=1 -> X(start_i=0 W start_i=0 * hbusreq_i=0 * active_i=1))]
00:07:50  saf_part
 [  (SpecProperty: 
	assumptions=[hbusreq_i=0, hlock_i=0, hready_i=0], 
	  guarantees=[G(hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * start_i=1 * active_i=1 -> X(start_i=0 W start_i=0 * hbusreq_i=0 * active_i=1))])  ]
00:07:50  Ltl2UCW: converting..(non-negated version)
(G((((((((hmastlock_i=1) * (hburst0_i=1)) * (hburst1_i=1)) * (start_i=1)) * (hready_i=1)) * (active_i=1)) -> (X((((start_i=0) U ((((start_i=0) * (hready_i=1)) * (active_i=1)) * (X((((start_i=0) U ((((start_i=0) * (hready_i=1)) * (active_i=1)) * (X((((start_i=0) U (((start_i=0) * (hready_i=1)) * (active_i=1))) + (G((start_i=0)))))))) + (G((start_i=0)))))))) + (G((start_i=0)))))))))
00:07:50  never { /* !(G(((((((hmastlock_i) && (hburst0_i)) && (hburst1_i)) && (start_i)) && (hready_i)) && (active_i)) -> (X(((!start_i) U ((((!start_i) && (hready_i)) && (active_i)) && (X(((!start_i) U ((((!start_i) && (hready_i)) && (active_i)) && (X(((!start_i) U (((!start_i) && (hready_i)) && (active_i))) || (G(!start_i)))))) || (G(!start_i)))))) || (G(!start_i)))))) */
T0_init:
	if
	:: (1) -> goto T0_init
	:: (start_i && active_i && hready_i && hburst0_i && hmastlock_i && hburst1_i) -> goto T0_S2
	fi;
T0_S2:
	if
	:: (!start_i && !active_i) || (!start_i && active_i && !hready_i) -> goto T0_S2
	:: (start_i) -> goto accept_all
	:: (!start_i && active_i && hready_i) -> goto T0_S4
	fi;
T0_S4:
	if
	:: (start_i) -> goto accept_all
	:: (!start_i && !active_i) || (!start_i && active_i && !hready_i) -> goto T0_S4
	:: (!start_i && active_i && hready_i) -> goto T0_S6
	fi;
T0_S6:
	if
	:: (start_i) -> goto accept_all
	:: (!start_i && !active_i) || (!start_i && active_i && !hready_i) -> goto T0_S6
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  init_ass [hbusreq_i=0, hlock_i=0, hready_i=0]
00:07:50  init_gua []
00:07:50  saf_ass [G(hlock_i=1 -> hbusreq_i=1), G(hbusreq_i=1 -> noreq_i=0), G(hburst0_i=1), G(hburst1_i=1), G(hbusreq_i=1 -> hlock_i=1)]
00:07:50  saf_gua [G(hmastlock_i=1 * hburst0_i=1 * hburst1_i=1 * start_i=1 * hready_i=1 * active_i=1 -> X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1))))]
00:07:50  liv_ass []
00:07:50  liv_gua []
00:07:50  Not all safety guarantees are of form G(bool_formulaOneNext). We will treat them with "->". 
 [G(hmastlock_i=1 * hburst0_i=1 * hburst1_i=1 * start_i=1 * hready_i=1 * active_i=1 -> X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1))))]
00:07:50  saf_part
 [  (SpecProperty: 
	assumptions=[hbusreq_i=0, hlock_i=0, hready_i=0], 
	  guarantees=[G(hmastlock_i=1 * hburst0_i=1 * hburst1_i=1 * start_i=1 * hready_i=1 * active_i=1 -> X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1))))])  ]
00:07:50  Ltl2UCW: converting..(non-negated version)
(G((((((((hmastlock_i=1) * (hburst0_i=1)) * (hburst1_i=1)) * (start_i=1)) * (hready_i=0)) * (active_i=1)) -> (X((((start_i=0) U ((((start_i=0) * (hready_i=1)) * (active_i=1)) * (X((((start_i=0) U ((((start_i=0) * (hready_i=1)) * (active_i=1)) * (X((((start_i=0) U ((((start_i=0) * (hready_i=1)) * (active_i=1)) * (X((((start_i=0) U (((start_i=0) * (hready_i=1)) * (active_i=1))) + (G((start_i=0)))))))) + (G((start_i=0)))))))) + (G((start_i=0)))))))) + (G((start_i=0)))))))))
00:07:50  never { /* !(G(((((((hmastlock_i) && (hburst0_i)) && (hburst1_i)) && (start_i)) && (!hready_i)) && (active_i)) -> (X(((!start_i) U ((((!start_i) && (hready_i)) && (active_i)) && (X(((!start_i) U ((((!start_i) && (hready_i)) && (active_i)) && (X(((!start_i) U ((((!start_i) && (hready_i)) && (active_i)) && (X(((!start_i) U (((!start_i) && (hready_i)) && (active_i))) || (G(!start_i)))))) || (G(!start_i)))))) || (G(!start_i)))))) || (G(!start_i)))))) */
T0_init:
	if
	:: (1) -> goto T0_init
	:: (!hready_i && start_i && active_i && hburst0_i && hmastlock_i && hburst1_i) -> goto T0_S2
	fi;
T0_S2:
	if
	:: (!hready_i && !start_i) || (hready_i && !start_i && !active_i) -> goto T0_S2
	:: (start_i) -> goto accept_all
	:: (hready_i && !start_i && active_i) -> goto T0_S4
	fi;
T0_S4:
	if
	:: (start_i) -> goto accept_all
	:: (!hready_i && !start_i) || (hready_i && !start_i && !active_i) -> goto T0_S4
	:: (hready_i && !start_i && active_i) -> goto T0_S6
	fi;
T0_S6:
	if
	:: (start_i) -> goto accept_all
	:: (!hready_i && !start_i) || (hready_i && !start_i && !active_i) -> goto T0_S6
	:: (hready_i && !start_i && active_i) -> goto T0_S8
	fi;
T0_S8:
	if
	:: (start_i) -> goto accept_all
	:: (!hready_i && !start_i) || (hready_i && !start_i && !active_i) -> goto T0_S8
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  init_ass [hbusreq_i=0, hlock_i=0, hready_i=0]
00:07:50  init_gua []
00:07:50  saf_ass [G(hlock_i=1 -> hbusreq_i=1), G(hbusreq_i=1 -> noreq_i=0), G(hburst0_i=1), G(hburst1_i=1), G(hbusreq_i=1 -> hlock_i=1)]
00:07:50  saf_gua [G(hmastlock_i=1 * hburst0_i=1 * hburst1_i=1 * start_i=1 * hready_i=0 * active_i=1 -> X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1)))))]
00:07:50  liv_ass []
00:07:50  liv_gua []
00:07:50  Not all safety guarantees are of form G(bool_formulaOneNext). We will treat them with "->". 
 [G(hmastlock_i=1 * hburst0_i=1 * hburst1_i=1 * start_i=1 * hready_i=0 * active_i=1 -> X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1)))))]
00:07:50  saf_part
 [  (SpecProperty: 
	assumptions=[hbusreq_i=0, hlock_i=0, hready_i=0], 
	  guarantees=[G(hmastlock_i=1 * hburst0_i=1 * hburst1_i=1 * start_i=1 * hready_i=0 * active_i=1 -> X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1)))))])  ]
00:07:50  Ltl2UCW: converting..(non-negated version)
(G((((hready_i=1) * (active_i=1)) -> ((hgrant_i=1) <-> (X((hmaster_i=1)))))))
00:07:50  never { /* !(G(((hready_i) && (active_i)) -> ((hgrant_i) <-> (X(hmaster_i))))) */
T0_init:
	if
	:: (1) -> goto T0_init
	:: (active_i && hready_i && hgrant_i) -> goto accept_S2
	:: (active_i && hready_i && !hgrant_i) -> goto accept_S3
	fi;
accept_S3:
	if
	:: (hmaster_i) -> goto accept_all
	fi;
accept_S2:
	if
	:: (!hmaster_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  init_ass [hbusreq_i=0, hlock_i=0, hready_i=0]
00:07:50  init_gua []
00:07:50  saf_ass [G(hlock_i=1 -> hbusreq_i=1), G(hbusreq_i=1 -> noreq_i=0), G(hburst0_i=1), G(hburst1_i=1), G(hbusreq_i=1 -> hlock_i=1)]
00:07:50  saf_gua [G(hready_i=1 * active_i=1 -> hgrant_i=1 <-> X(hmaster_i=1))]
00:07:50  liv_ass []
00:07:50  liv_gua []
00:07:50  saf_part
 []
00:07:50  Ltl2UCW: converting..(non-negated version)
(G((((hready_i=1) * (active_i=1)) -> ((locked_i=1) <-> (X((hmastlock_i=1)))))))
00:07:50  never { /* !(G(((hready_i) && (active_i)) -> ((locked_i) <-> (X(hmastlock_i))))) */
T0_init:
	if
	:: (1) -> goto T0_init
	:: (active_i && hready_i && locked_i) -> goto accept_S2
	:: (active_i && hready_i && !locked_i) -> goto accept_S3
	fi;
accept_S3:
	if
	:: (hmastlock_i) -> goto accept_all
	fi;
accept_S2:
	if
	:: (!hmastlock_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  init_ass [hbusreq_i=0, hlock_i=0, hready_i=0]
00:07:50  init_gua []
00:07:50  saf_ass [G(hlock_i=1 -> hbusreq_i=1), G(hbusreq_i=1 -> noreq_i=0), G(hburst0_i=1), G(hburst1_i=1), G(hbusreq_i=1 -> hlock_i=1)]
00:07:50  saf_gua [G(hready_i=1 * active_i=1 -> locked_i=1 <-> X(hmastlock_i=1))]
00:07:50  liv_ass []
00:07:50  liv_gua []
00:07:50  saf_part
 []
00:07:50  Ltl2UCW: converting..(non-negated version)
(G(((X((start_i=0))) -> ((hmaster_i=1) <-> (X((hmaster_i=1)))))))
00:07:50  never { /* !(G((X(!start_i)) -> ((hmaster_i) <-> (X(hmaster_i))))) */
T0_init:
	if
	:: (1) -> goto T0_init
	:: (hmaster_i) -> goto accept_S2
	:: (!hmaster_i) -> goto accept_S3
	fi;
accept_S3:
	if
	:: (!start_i && hmaster_i) -> goto accept_all
	fi;
accept_S2:
	if
	:: (!start_i && !hmaster_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  init_ass [hbusreq_i=0, hlock_i=0, hready_i=0]
00:07:50  init_gua []
00:07:50  saf_ass [G(hlock_i=1 -> hbusreq_i=1), G(hbusreq_i=1 -> noreq_i=0), G(hburst0_i=1), G(hburst1_i=1), G(hbusreq_i=1 -> hlock_i=1)]
00:07:50  saf_gua [G(X(start_i=0) -> hmaster_i=1 <-> X(hmaster_i=1))]
00:07:50  liv_ass []
00:07:50  liv_gua []
00:07:50  saf_part
 []
00:07:50  Ltl2UCW: converting..(non-negated version)
(G(((X((start_i=0))) -> ((hmastlock_i=1) <-> (X((hmastlock_i=1)))))))
00:07:50  never { /* !(G((X(!start_i)) -> ((hmastlock_i) <-> (X(hmastlock_i))))) */
T0_init:
	if
	:: (1) -> goto T0_init
	:: (hmastlock_i) -> goto accept_S2
	:: (!hmastlock_i) -> goto accept_S3
	fi;
accept_S3:
	if
	:: (!start_i && hmastlock_i) -> goto accept_all
	fi;
accept_S2:
	if
	:: (!start_i && !hmastlock_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  init_ass [hbusreq_i=0, hlock_i=0, hready_i=0]
00:07:50  init_gua []
00:07:50  saf_ass [G(hlock_i=1 -> hbusreq_i=1), G(hbusreq_i=1 -> noreq_i=0), G(hburst0_i=1), G(hburst1_i=1), G(hbusreq_i=1 -> hlock_i=1)]
00:07:50  saf_gua [G(X(start_i=0) -> hmastlock_i=1 <-> X(hmastlock_i=1))]
00:07:50  liv_ass []
00:07:50  liv_gua []
00:07:50  saf_part
 []
00:07:50  Ltl2UCW: converting..(non-negated version)
(G(((((decide_i=1) * (active_i=1)) * (X((hgrant_i=1)))) -> ((hlock_i=1) <-> (X((locked_i=1)))))))
00:07:50  never { /* !(G((((decide_i) && (active_i)) && (X(hgrant_i))) -> ((hlock_i) <-> (X(locked_i))))) */
T0_init:
	if
	:: (1) -> goto T0_init
	:: (decide_i && hlock_i && active_i) -> goto accept_S2
	:: (decide_i && !hlock_i && active_i) -> goto accept_S3
	fi;
accept_S3:
	if
	:: (hgrant_i && locked_i) -> goto accept_all
	fi;
accept_S2:
	if
	:: (hgrant_i && !locked_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  init_ass [hbusreq_i=0, hlock_i=0, hready_i=0]
00:07:50  init_gua []
00:07:50  saf_ass [G(hlock_i=1 -> hbusreq_i=1), G(hbusreq_i=1 -> noreq_i=0), G(hburst0_i=1), G(hburst1_i=1), G(hbusreq_i=1 -> hlock_i=1)]
00:07:50  saf_gua [G(decide_i=1 * active_i=1 * X(hgrant_i=1) -> hlock_i=1 <-> X(locked_i=1))]
00:07:50  liv_ass []
00:07:50  liv_gua []
00:07:50  saf_part
 []
00:07:50  Ltl2UCW: converting..(non-negated version)
(G((((decide_i=0) * (active_i=1)) -> ((hgrant_i=1) <-> (X((hgrant_i=1)))))))
00:07:50  never { /* !(G(((!decide_i) && (active_i)) -> ((hgrant_i) <-> (X(hgrant_i))))) */
T0_init:
	if
	:: (1) -> goto T0_init
	:: (!decide_i && hgrant_i && active_i) -> goto accept_S2
	:: (!decide_i && !hgrant_i && active_i) -> goto accept_S3
	fi;
accept_S3:
	if
	:: (hgrant_i) -> goto accept_all
	fi;
accept_S2:
	if
	:: (!hgrant_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  init_ass [hbusreq_i=0, hlock_i=0, hready_i=0]
00:07:50  init_gua []
00:07:50  saf_ass [G(hlock_i=1 -> hbusreq_i=1), G(hbusreq_i=1 -> noreq_i=0), G(hburst0_i=1), G(hburst1_i=1), G(hbusreq_i=1 -> hlock_i=1)]
00:07:50  saf_gua [G(decide_i=0 * active_i=1 -> hgrant_i=1 <-> X(hgrant_i=1))]
00:07:50  liv_ass []
00:07:50  liv_gua []
00:07:50  saf_part
 []
00:07:50  Ltl2UCW: converting..(non-negated version)
(G((((decide_i=0) * (active_i=1)) -> ((locked_i=1) <-> (X((locked_i=1)))))))
00:07:50  never { /* !(G(((!decide_i) && (active_i)) -> ((locked_i) <-> (X(locked_i))))) */
T0_init:
	if
	:: (1) -> goto T0_init
	:: (!decide_i && locked_i && active_i) -> goto accept_S2
	:: (!decide_i && !locked_i && active_i) -> goto accept_S3
	fi;
accept_S3:
	if
	:: (locked_i) -> goto accept_all
	fi;
accept_S2:
	if
	:: (!locked_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  init_ass [hbusreq_i=0, hlock_i=0, hready_i=0]
00:07:50  init_gua []
00:07:50  saf_ass [G(hlock_i=1 -> hbusreq_i=1), G(hbusreq_i=1 -> noreq_i=0), G(hburst0_i=1), G(hburst1_i=1), G(hbusreq_i=1 -> hlock_i=1)]
00:07:50  saf_gua [G(decide_i=0 * active_i=1 -> locked_i=1 <-> X(locked_i=1))]
00:07:50  liv_ass []
00:07:50  liv_gua []
00:07:50  saf_part
 []
00:07:50  Ltl2UCW: converting..(non-negated version)
(G((((noreq_i=1) * (prev_i=1)) -> (X((hgrant_i=1))))))
00:07:50  never { /* !(G(((noreq_i) && (prev_i)) -> (X(hgrant_i)))) */
T0_init:
	if
	:: (1) -> goto T0_init
	:: (noreq_i && prev_i) -> goto accept_S2
	fi;
accept_S2:
	if
	:: (!hgrant_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  init_ass [hbusreq_i=0, hlock_i=0, hready_i=0]
00:07:50  init_gua []
00:07:50  saf_ass [G(hlock_i=1 -> hbusreq_i=1), G(hbusreq_i=1 -> noreq_i=0), G(hburst0_i=1), G(hburst1_i=1), G(hbusreq_i=1 -> hlock_i=1)]
00:07:50  saf_gua [G(noreq_i=1 * prev_i=1 -> X(hgrant_i=1))]
00:07:50  liv_ass []
00:07:50  liv_gua []
00:07:50  saf_part
 []
00:07:50  Ltl2UCW: converting..(non-negated version)
((tok_i=1) -> (((hgrant_i=1) * (hmaster_i=1)) * (hmastlock_i=0)))
00:07:50  never { /* !((tok_i) -> (((hgrant_i) && (hmaster_i)) && (!hmastlock_i))) */
accept_init:
	if
	:: (tok_i && !hgrant_i) || (tok_i && hgrant_i && !hmaster_i) || (tok_i && hgrant_i && hmaster_i && hmastlock_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  init_ass [hbusreq_i=0, hlock_i=0, hready_i=0]
00:07:50  init_gua [tok_i=1 -> hgrant_i=1 * hmaster_i=1 * hmastlock_i=0]
00:07:50  saf_ass [G(hlock_i=1 -> hbusreq_i=1), G(hbusreq_i=1 -> noreq_i=0), G(hburst0_i=1), G(hburst1_i=1), G(hbusreq_i=1 -> hlock_i=1)]
00:07:50  saf_gua []
00:07:50  liv_ass []
00:07:50  liv_gua []
00:07:50  saf_part
 [  (SpecProperty: 
	assumptions=[hbusreq_i=0, hlock_i=0, hready_i=0], 
	  guarantees=[tok_i=1 -> hgrant_i=1 * hmaster_i=1 * hmastlock_i=0])  ]
00:07:50  Ltl2UCW: converting..(non-negated version)
((tok_i=0) -> (((hgrant_i=0) * (hmaster_i=0)) * (hmastlock_i=0)))
00:07:50  never { /* !((!tok_i) -> (((!hgrant_i) && (!hmaster_i)) && (!hmastlock_i))) */
accept_init:
	if
	:: (!tok_i && !hgrant_i && !hmaster_i && hmastlock_i) || (!tok_i && !hgrant_i && hmaster_i) || (!tok_i && hgrant_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  init_ass [hbusreq_i=0, hlock_i=0, hready_i=0]
00:07:50  init_gua [tok_i=0 -> hgrant_i=0 * hmaster_i=0 * hmastlock_i=0]
00:07:50  saf_ass [G(hlock_i=1 -> hbusreq_i=1), G(hbusreq_i=1 -> noreq_i=0), G(hburst0_i=1), G(hburst1_i=1), G(hbusreq_i=1 -> hlock_i=1)]
00:07:50  saf_gua []
00:07:50  liv_ass []
00:07:50  liv_gua []
00:07:50  saf_part
 [  (SpecProperty: 
	assumptions=[hbusreq_i=0, hlock_i=0, hready_i=0], 
	  guarantees=[tok_i=0 -> hgrant_i=0 * hmaster_i=0 * hmastlock_i=0])  ]
00:07:50  Ltl2UCW: converting..(non-negated version)
(G(((hgrant_i=1) -> (tok_i=1))))
00:07:50  never { /* !(G((hgrant_i) -> (tok_i))) */
T0_init:
	if
	:: (!tok_i && !hgrant_i) || (tok_i) -> goto T0_init
	:: (!tok_i && hgrant_i) -> goto accept_all
	fi;
accept_all:
	skip
}

00:07:50  parse_ltl2ba_ba
00:07:50  init_ass [hbusreq_i=0, hlock_i=0, hready_i=0]
00:07:50  init_gua []
00:07:50  saf_ass [G(hlock_i=1 -> hbusreq_i=1), G(hbusreq_i=1 -> noreq_i=0), G(hburst0_i=1), G(hburst1_i=1), G(hbusreq_i=1 -> hlock_i=1)]
00:07:50  saf_gua [G(hgrant_i=1 -> tok_i=1)]
00:07:50  liv_ass []
00:07:50  liv_gua []
00:07:50  saf_part
 []
00:07:50  Ltl2UCW: converting..(non-negated version)
(G((((((hmastlock_i=1) * (hburst0_i=0)) * (hburst1_i=1)) * (hmaster_i=1)) -> (X((F(((hbusreq_i=0) * (active_i=1)))))))))
00:07:50  never { /* !(G(((((hmastlock_i) && (!hburst0_i)) && (hburst1_i)) && (hmaster_i)) -> (X(F((!hbusreq_i) && (active_i)))))) */
T0_init:
	if
	:: (!hburst0_i && hmaster_i && hmastlock_i && hburst1_i) -> goto accept_S2
	:: (1) -> goto T0_init
	fi;
accept_S2:
	if
	:: (!active_i) || (active_i && hbusreq_i) -> goto accept_S2
	fi;
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(G((F(((hready_i=1) * (active_i=1))))))
00:07:50  never { /* !(G(F((hready_i) && (active_i)))) */
T0_init:
	if
	:: (1) -> goto T0_init
	:: (!active_i) || (active_i && !hready_i) -> goto accept_S2
	fi;
accept_S2:
	if
	:: (!active_i) || (active_i && !hready_i) -> goto accept_S2
	fi;
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(G((F((fair_scheduling_i=1)))))
00:07:50  never { /* !(G(F(fair_scheduling_i))) */
T0_init:
	if
	:: (1) -> goto T0_init
	:: (!fair_scheduling_i) -> goto accept_S2
	fi;
accept_S2:
	if
	:: (!fair_scheduling_i) -> goto accept_S2
	fi;
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(G((F((tok_i=1)))))
00:07:50  never { /* !(G(F(tok_i))) */
T0_init:
	if
	:: (1) -> goto T0_init
	:: (!tok_i) -> goto accept_S2
	fi;
accept_S2:
	if
	:: (!tok_i) -> goto accept_S2
	fi;
}

00:07:50  parse_ltl2ba_ba
00:07:50  Ltl2UCW: converting..(non-negated version)
(G(((hbusreq_i=1) -> (F(((hbusreq_i=0) + (hmaster_i=1)))))))
00:07:50  never { /* !(G((hbusreq_i) -> (F((!hbusreq_i) || (hmaster_i))))) */
T0_init:
	if
	:: (1) -> goto T0_init
	:: (!hmaster_i && hbusreq_i) -> goto accept_S2
	fi;
accept_S2:
	if
	:: (!hmaster_i && hbusreq_i) -> goto accept_S2
	fi;
}

00:07:50  parse_ltl2ba_ba
00:07:50  init_ass [hbusreq_i=0, hlock_i=0, hready_i=0]
00:07:50  init_gua []
00:07:50  saf_ass [G(hlock_i=1 -> hbusreq_i=1), G(hbusreq_i=1 -> noreq_i=0), G(hburst0_i=1), G(hburst1_i=1), G(hbusreq_i=1 -> hlock_i=1)]
00:07:50  saf_gua []
00:07:50  liv_ass [G(hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * hmaster_i=1 -> X(F(hbusreq_i=0 * active_i=1))), G(F(hready_i=1 * active_i=1)), G(F(fair_scheduling_i=1)), G(F(tok_i=1))]
00:07:50  liv_gua [G(hbusreq_i=1 -> F(hbusreq_i=0 + hmaster_i=1))]
00:07:50  saf_part
 []
00:07:50  liv_part
   (SpecProperty: 
	assumptions=[hbusreq_i=0, hlock_i=0, hready_i=0, G(hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * hmaster_i=1 -> X(F(hbusreq_i=0 * active_i=1))), G(F(hready_i=1 * active_i=1)), G(F(fair_scheduling_i=1)), G(F(tok_i=1))], 
	  guarantees=[G(hbusreq_i=1 -> F(hbusreq_i=0 + hmaster_i=1))])  
00:07:50  Ltl2UCW: converting..(non-negated version)
(G(((tok_i=1) -> (F((sends_i=1))))))
00:07:50  never { /* !(G((tok_i) -> (F(sends_i)))) */
T0_init:
	if
	:: (1) -> goto T0_init
	:: (!sends_i && tok_i) -> goto accept_S2
	fi;
accept_S2:
	if
	:: (!sends_i) -> goto accept_S2
	fi;
}

00:07:50  parse_ltl2ba_ba
00:07:50  init_ass [hbusreq_i=0, hlock_i=0, hready_i=0]
00:07:50  init_gua []
00:07:50  saf_ass [G(hlock_i=1 -> hbusreq_i=1), G(hbusreq_i=1 -> noreq_i=0), G(hburst0_i=1), G(hburst1_i=1), G(hbusreq_i=1 -> hlock_i=1)]
00:07:50  saf_gua []
00:07:50  liv_ass [G(hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * hmaster_i=1 -> X(F(hbusreq_i=0 * active_i=1))), G(F(hready_i=1 * active_i=1)), G(F(fair_scheduling_i=1))]
00:07:50  liv_gua [G(tok_i=1 -> F(sends_i=1))]
00:07:50  saf_part
 []
00:07:50  liv_part
   (SpecProperty: 
	assumptions=[hbusreq_i=0, hlock_i=0, hready_i=0, G(hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * hmaster_i=1 -> X(F(hbusreq_i=0 * active_i=1))), G(F(hready_i=1 * active_i=1)), G(F(fair_scheduling_i=1))], 
	  guarantees=[G(tok_i=1 -> F(sends_i=1))])  
[32m<name: env_ass, inputs: [(hburst0_0, 'Bool'), (hburst1_0, 'Bool'), (hbusreq_0, 'Bool'), (hlock_0, 'Bool'), (noreq_0, 'Bool')], output: Bool, definition: 
(define-fun env_ass ((hburst0_0 Bool) (hburst1_0 Bool) (hbusreq_0 Bool) (hlock_0 Bool) (noreq_0 Bool)) Bool 
(and (and (and (and (=> hbusreq_0 (not noreq_0)) hburst1_0) (=> hlock_0 hbusreq_0)) (=> hbusreq_0 hlock_0)) hburst0_0)
)>
[31m<name: sys_gua, inputs: [(decideNext_0, 'Bool'), (decide_0, 'Bool'), (hgrantNext_0, 'Bool'), (hgrant_0, 'Bool'), (hlockNext_0, 'Bool'), (hlock_0, 'Bool'), (hmasterNext_0, 'Bool'), (hmaster_0, 'Bool'), (hmastlockNext_0, 'Bool'), (hmastlock_0, 'Bool'), (hreadyNext_0, 'Bool'), (hready_0, 'Bool'), (lockedNext_0, 'Bool'), (locked_0, 'Bool'), (noreqNext_0, 'Bool'), (noreq_0, 'Bool'), (prevNext_0, 'Bool'), (prev_0, 'Bool'), (startNext_0, 'Bool'), (start_0, 'Bool'), (tokNext_0, 'Bool'), (tok_0, 'Bool')], output: Bool, definition: 
(define-fun sys_gua ((decideNext_0 Bool) (decide_0 Bool) (hgrantNext_0 Bool) (hgrant_0 Bool) (hlockNext_0 Bool) (hlock_0 Bool) (hmasterNext_0 Bool) (hmaster_0 Bool) (hmastlockNext_0 Bool) (hmastlock_0 Bool) (hreadyNext_0 Bool) (hready_0 Bool) (lockedNext_0 Bool) (locked_0 Bool) (noreqNext_0 Bool) (noreq_0 Bool) (prevNext_0 Bool) (prev_0 Bool) (startNext_0 Bool) (start_0 Bool) (tokNext_0 Bool) (tok_0 Bool)) Bool 
(and (and (and (and (and (and (and (and (and (=> (and (not decide_0)  true ) (= locked_0 lockedNext_0)) (=> (and hready_0  true ) (= locked_0 hmastlockNext_0))) (=> (and hready_0  true ) (= hgrant_0 hmasterNext_0))) (=> (not startNext_0) (= hmaster_0 hmasterNext_0))) (=> (and (not hready_0)  true ) (not startNext_0))) (=> (and (and decide_0  true ) hgrantNext_0) (= hlock_0 lockedNext_0))) (=> (not startNext_0) (= hmastlock_0 hmastlockNext_0))) (=> hgrant_0 tok_0)) (=> (and (not decide_0)  true ) (= hgrant_0 hgrantNext_0))) (=> (and noreq_0 prev_0) hgrantNext_0))
)>
00:07:50  properties after weak-until optimization 
 [  (SpecProperty: 
	assumptions=[], 
	  guarantees=[Forall(i) hbusreq_i=0 * hlock_i=0 * hready_i=0 -> G(hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * start_i=1 * active_i=1 -> X(start_i=0 W start_i=0 * hbusreq_i=0 * active_i=1))])  ,   (SpecProperty: 
	assumptions=[], 
	  guarantees=[Forall(i) hbusreq_i=0 * hlock_i=0 * hready_i=0 -> G(hmastlock_i=1 * hburst0_i=1 * hburst1_i=1 * start_i=1 * hready_i=1 * active_i=1 -> X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1))))])  ,   (SpecProperty: 
	assumptions=[], 
	  guarantees=[Forall(i) hbusreq_i=0 * hlock_i=0 * hready_i=0 -> G(hmastlock_i=1 * hburst0_i=1 * hburst1_i=1 * start_i=1 * hready_i=0 * active_i=1 -> X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1)))))])  ,   (SpecProperty: 
	assumptions=[], 
	  guarantees=[Forall(i) hbusreq_i=0 * hlock_i=0 * hready_i=0 -> tok_i=1 -> hgrant_i=1 * hmaster_i=1 * hmastlock_i=0])  ,   (SpecProperty: 
	assumptions=[], 
	  guarantees=[Forall(i) hbusreq_i=0 * hlock_i=0 * hready_i=0 -> tok_i=0 -> hgrant_i=0 * hmaster_i=0 * hmastlock_i=0])  ,   (SpecProperty: 
	assumptions=[], 
	  guarantees=[Forall(i) hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * hmaster_i=1 -> X(F(hbusreq_i=0 * active_i=1))) * G(F(hready_i=1 * active_i=1)) * G(F(fair_scheduling_i=1)) * G(F(tok_i=1)) -> G(hbusreq_i=1 -> F(hbusreq_i=0 + hmaster_i=1))])  ,   (SpecProperty: 
	assumptions=[], 
	  guarantees=[Forall(i) hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * hmaster_i=1 -> X(F(hbusreq_i=0 * active_i=1))) * G(F(hready_i=1 * active_i=1)) * G(F(fair_scheduling_i=1)) -> G(tok_i=1 -> F(sends_i=1))])  ] 

00:07:50  instantiated local properties:
[  (SpecProperty: 
	assumptions=[], 
	  guarantees=[hbusreq_0=0 * hlock_0=0 * hready_0=0 -> G(hmastlock_0=1 * hburst0_0=0 * hburst1_0=1 * start_0=1 * True -> X(start_0=0 W start_0=0 * hbusreq_0=0 * True))])  ,   (SpecProperty: 
	assumptions=[], 
	  guarantees=[hbusreq_0=0 * hlock_0=0 * hready_0=0 -> G(hmastlock_0=1 * hburst0_0=1 * hburst1_0=1 * start_0=1 * hready_0=1 * True -> X(start_0=0 W start_0=0 * hready_0=1 * True * X(start_0=0 W start_0=0 * hready_0=1 * True * X(start_0=0 W start_0=0 * hready_0=1 * True))))])  ,   (SpecProperty: 
	assumptions=[], 
	  guarantees=[hbusreq_0=0 * hlock_0=0 * hready_0=0 -> G(hmastlock_0=1 * hburst0_0=1 * hburst1_0=1 * start_0=1 * hready_0=0 * True -> X(start_0=0 W start_0=0 * hready_0=1 * True * X(start_0=0 W start_0=0 * hready_0=1 * True * X(start_0=0 W start_0=0 * hready_0=1 * True * X(start_0=0 W start_0=0 * hready_0=1 * True)))))])  ,   (SpecProperty: 
	assumptions=[], 
	  guarantees=[hbusreq_0=0 * hlock_0=0 * hready_0=0 -> tok_0=1 -> hgrant_0=1 * hmaster_0=1 * hmastlock_0=0])  ,   (SpecProperty: 
	assumptions=[], 
	  guarantees=[hbusreq_0=0 * hlock_0=0 * hready_0=0 -> tok_0=0 -> hgrant_0=0 * hmaster_0=0 * hmastlock_0=0])  ,   (SpecProperty: 
	assumptions=[], 
	  guarantees=[hbusreq_0=0 * hlock_0=0 * hready_0=0 * G(hmastlock_0=1 * hburst0_0=0 * hburst1_0=1 * hmaster_0=1 -> X(F(hbusreq_0=0 * True))) * G(F(hready_0=1 * True)) * G(F(True)) * G(F(tok_0=1)) -> G(hbusreq_0=1 -> F(hbusreq_0=0 + hmaster_0=1))])  ,   (SpecProperty: 
	assumptions=[], 
	  guarantees=[hbusreq_0=0 * hlock_0=0 * hready_0=0 * G(hmastlock_0=1 * hburst0_0=0 * hburst1_0=1 * hmaster_0=1 -> X(F(hbusreq_0=0 * True))) * G(F(hready_0=1 * True)) * G(F(True)) -> G(tok_0=1 -> F(sends_0=1))])  ]

00:07:50  instantiated global properties:
[]

00:07:50  Ltl2UCW: converting..(non-negated version)
(TRUE -> (((((((TRUE -> ((((hbusreq_0=0) * (hlock_0=0)) * (hready_0=0)) -> (G(((((((hmastlock_0=1) * (hburst0_0=0)) * (hburst1_0=1)) * (start_0=1)) * TRUE) -> (X((((start_0=0) U (((start_0=0) * (hbusreq_0=0)) * TRUE)) + (G((start_0=0))))))))))) * (TRUE -> ((((hbusreq_0=0) * (hlock_0=0)) * (hready_0=0)) -> (G((((((((hmastlock_0=1) * (hburst0_0=1)) * (hburst1_0=1)) * (start_0=1)) * (hready_0=1)) * TRUE) -> (X((((start_0=0) U ((((start_0=0) * (hready_0=1)) * TRUE) * (X((((start_0=0) U ((((start_0=0) * (hready_0=1)) * TRUE) * (X((((start_0=0) U (((start_0=0) * (hready_0=1)) * TRUE)) + (G((start_0=0)))))))) + (G((start_0=0)))))))) + (G((start_0=0)))))))))))) * (TRUE -> ((((hbusreq_0=0) * (hlock_0=0)) * (hready_0=0)) -> (G((((((((hmastlock_0=1) * (hburst0_0=1)) * (hburst1_0=1)) * (start_0=1)) * (hready_0=0)) * TRUE) -> (X((((start_0=0) U ((((start_0=0) * (hready_0=1)) * TRUE) * (X((((start_0=0) U ((((start_0=0) * (hready_0=1)) * TRUE) * (X((((start_0=0) U ((((start_0=0) * (hready_0=1)) * TRUE) * (X((((start_0=0) U (((start_0=0) * (hready_0=1)) * TRUE)) + (G((start_0=0)))))))) + (G((start_0=0)))))))) + (G((start_0=0)))))))) + (G((start_0=0)))))))))))) * (TRUE -> ((((hbusreq_0=0) * (hlock_0=0)) * (hready_0=0)) -> ((tok_0=1) -> (((hgrant_0=1) * (hmaster_0=1)) * (hmastlock_0=0)))))) * (TRUE -> ((((hbusreq_0=0) * (hlock_0=0)) * (hready_0=0)) -> ((tok_0=0) -> (((hgrant_0=0) * (hmaster_0=0)) * (hmastlock_0=0)))))) * (TRUE -> ((((((((hbusreq_0=0) * (hlock_0=0)) * (hready_0=0)) * (G((((((hmastlock_0=1) * (hburst0_0=0)) * (hburst1_0=1)) * (hmaster_0=1)) -> (X((F(((hbusreq_0=0) * TRUE))))))))) * (G((F(((hready_0=1) * TRUE)))))) * (G((F(TRUE))))) * (G((F((tok_0=1)))))) -> (G(((hbusreq_0=1) -> (F(((hbusreq_0=0) + (hmaster_0=1)))))))))) * (TRUE -> (((((((hbusreq_0=0) * (hlock_0=0)) * (hready_0=0)) * (G((((((hmastlock_0=1) * (hburst0_0=0)) * (hburst1_0=1)) * (hmaster_0=1)) -> (X((F(((hbusreq_0=0) * TRUE))))))))) * (G((F(((hready_0=1) * TRUE)))))) * (G((F(TRUE))))) -> (G(((tok_0=1) -> (F((sends_0=1))))))))))
00:07:51  never { /* !((true) -> ((((((((true) -> ((((!hbusreq_0) && (!hlock_0)) && (!hready_0)) -> (G((((((hmastlock_0) && (!hburst0_0)) && (hburst1_0)) && (start_0)) && (true)) -> (X(((!start_0) U (((!start_0) && (!hbusreq_0)) && (true))) || (G(!start_0)))))))) && ((true) -> ((((!hbusreq_0) && (!hlock_0)) && (!hready_0)) -> (G(((((((hmastlock_0) && (hburst0_0)) && (hburst1_0)) && (start_0)) && (hready_0)) && (true)) -> (X(((!start_0) U ((((!start_0) && (hready_0)) && (true)) && (X(((!start_0) U ((((!start_0) && (hready_0)) && (true)) && (X(((!start_0) U (((!start_0) && (hready_0)) && (true))) || (G(!start_0)))))) || (G(!start_0)))))) || (G(!start_0))))))))) && ((true) -> ((((!hbusreq_0) && (!hlock_0)) && (!hready_0)) -> (G(((((((hmastlock_0) && (hburst0_0)) && (hburst1_0)) && (start_0)) && (!hready_0)) && (true)) -> (X(((!start_0) U ((((!start_0) && (hready_0)) && (true)) && (X(((!start_0) U ((((!start_0) && (hready_0)) && (true)) && (X(((!start_0) U ((((!start_0) && (hready_0)) && (true)) && (X(((!start_0) U (((!start_0) && (hready_0)) && (true))) || (G(!start_0)))))) || (G(!start_0)))))) || (G(!start_0)))))) || (G(!start_0))))))))) && ((true) -> ((((!hbusreq_0) && (!hlock_0)) && (!hready_0)) -> ((tok_0) -> (((hgrant_0) && (hmaster_0)) && (!hmastlock_0)))))) && ((true) -> ((((!hbusreq_0) && (!hlock_0)) && (!hready_0)) -> ((!tok_0) -> (((!hgrant_0) && (!hmaster_0)) && (!hmastlock_0)))))) && ((true) -> ((((((((!hbusreq_0) && (!hlock_0)) && (!hready_0)) && (G(((((hmastlock_0) && (!hburst0_0)) && (hburst1_0)) && (hmaster_0)) -> (X(F((!hbusreq_0) && (true))))))) && (G(F((hready_0) && (true))))) && (G(F(true)))) && (G(F(tok_0)))) -> (G((hbusreq_0) -> (F((!hbusreq_0) || (hmaster_0)))))))) && ((true) -> (((((((!hbusreq_0) && (!hlock_0)) && (!hready_0)) && (G(((((hmastlock_0) && (!hburst0_0)) && (hburst1_0)) && (hmaster_0)) -> (X(F((!hbusreq_0) && (true))))))) && (G(F((hready_0) && (true))))) && (G(F(true)))) -> (G((tok_0) -> (F(sends_0)))))))) */
T0_init:
	if
	:: (!hbusreq_0 && !hlock_0 && !hready_0 && !hmaster_0 && !tok_0 && !hmastlock_0 && hgrant_0) || (!hbusreq_0 && !hlock_0 && !hready_0 && !hmaster_0 && !tok_0 && hmastlock_0) || (!hbusreq_0 && !hlock_0 && !hready_0 && !hmaster_0 && tok_0) || (!hbusreq_0 && !hlock_0 && !hready_0 && hmaster_0 && !tok_0) || (!hbusreq_0 && !hlock_0 && !hready_0 && hmaster_0 && tok_0 && !hmastlock_0 && !hgrant_0) || (!hbusreq_0 && !hlock_0 && !hready_0 && hmaster_0 && tok_0 && hmastlock_0) -> goto accept_all
	:: (!hbusreq_0 && !hlock_0 && !hready_0 && !hmaster_0 && !tok_0 && !hmastlock_0 && !hgrant_0) || (!hbusreq_0 && !hlock_0 && !hready_0 && hmaster_0 && tok_0 && !hmastlock_0 && hgrant_0) -> goto T7_S2
	:: (!hbusreq_0 && !hlock_0 && !hready_0 && !hmaster_0 && !tok_0 && !hmastlock_0 && !hgrant_0) || (!hbusreq_0 && !hlock_0 && !hready_0 && hmaster_0 && tok_0 && !hmastlock_0 && hgrant_0) -> goto T8_S3
	:: (!hbusreq_0 && !hlock_0 && !hready_0 && !hmaster_0 && !tok_0 && !hmastlock_0 && !hgrant_0) || (!hbusreq_0 && !hlock_0 && !hready_0 && hmaster_0 && tok_0 && !hmastlock_0 && hgrant_0) -> goto T6_S4
	:: (!hbusreq_0 && !hlock_0 && !hready_0 && !hmaster_0 && !tok_0 && !hmastlock_0 && !hgrant_0) || (!hbusreq_0 && !hlock_0 && !hready_0 && hmaster_0 && tok_0 && !hmastlock_0 && hgrant_0) -> goto T4_S6
	:: (!hbusreq_0 && !hlock_0 && !hready_0 && !hmaster_0 && !tok_0 && !hmastlock_0 && !hgrant_0) || (!hbusreq_0 && !hlock_0 && !hready_0 && hmaster_0 && tok_0 && !hmastlock_0 && hgrant_0) -> goto T0_S7
	:: (!hbusreq_0 && !hlock_0 && !hready_0 && hmaster_0 && tok_0 && !hmastlock_0 && !sends_0 && hgrant_0) -> goto accept_S19
	fi;
accept_S19:
	if
	:: (hready_0 && !hmaster_0 && !sends_0) || (hready_0 && hmaster_0 && !hburst1_0 && !sends_0) || (hready_0 && hmaster_0 && hburst1_0 && !hmastlock_0 && !sends_0) || (hready_0 && hmaster_0 && hburst1_0 && hmastlock_0 && hburst0_0 && !sends_0) -> goto accept_S19
	:: (!hready_0 && hmaster_0 && hburst1_0 && hmastlock_0 && !hburst0_0 && !sends_0) -> goto T1_S17
	:: (hready_0 && hmaster_0 && hburst1_0 && hmastlock_0 && !hburst0_0 && !sends_0) -> goto T3_S17
	:: (!hready_0 && !hmaster_0 && !sends_0) || (!hready_0 && hmaster_0 && !hburst1_0 && !sends_0) || (!hready_0 && hmaster_0 && hburst1_0 && !hmastlock_0 && !sends_0) || (!hready_0 && hmaster_0 && hburst1_0 && hmastlock_0 && hburst0_0 && !sends_0) -> goto T1_S19
	fi;
T1_S19:
	if
	:: (hready_0 && !hmaster_0 && !sends_0) || (hready_0 && hmaster_0 && !hburst1_0 && !sends_0) || (hready_0 && hmaster_0 && hburst1_0 && !hmastlock_0 && !sends_0) || (hready_0 && hmaster_0 && hburst1_0 && hmastlock_0 && hburst0_0 && !sends_0) -> goto accept_S19
	:: (!hready_0 && hmaster_0 && hburst1_0 && hmastlock_0 && !hburst0_0 && !sends_0) -> goto T1_S17
	:: (hready_0 && hmaster_0 && hburst1_0 && hmastlock_0 && !hburst0_0 && !sends_0) -> goto T3_S17
	:: (!hready_0 && !hmaster_0 && !sends_0) || (!hready_0 && hmaster_0 && !hburst1_0 && !sends_0) || (!hready_0 && hmaster_0 && hburst1_0 && !hmastlock_0 && !sends_0) || (!hready_0 && hmaster_0 && hburst1_0 && hmastlock_0 && hburst0_0 && !sends_0) -> goto T1_S19
	fi;
T3_S17:
	if
	:: (!hbusreq_0 && !hmaster_0 && !sends_0) || (!hbusreq_0 && hmaster_0 && !hburst1_0 && !sends_0) || (!hbusreq_0 && hmaster_0 && hburst1_0 && !hmastlock_0 && !sends_0) || (!hbusreq_0 && hmaster_0 && hburst1_0 && hmastlock_0 && hburst0_0 && !sends_0) -> goto accept_S19
	:: (hbusreq_0 && !sends_0) -> goto T3_S17
	:: (!hbusreq_0 && hmaster_0 && hburst1_0 && hmastlock_0 && !hburst0_0 && !sends_0) -> goto accept_S17
	fi;
accept_S17:
	if
	:: (!hbusreq_0 && hready_0 && !hmaster_0 && !sends_0) || (!hbusreq_0 && hready_0 && hmaster_0 && !hburst1_0 && !sends_0) || (!hbusreq_0 && hready_0 && hmaster_0 && hburst1_0 && !hmastlock_0 && !sends_0) || (!hbusreq_0 && hready_0 && hmaster_0 && hburst1_0 && hmastlock_0 && hburst0_0 && !sends_0) -> goto accept_S19
	:: (!hbusreq_0 && !hready_0 && hmaster_0 && hburst1_0 && hmastlock_0 && !hburst0_0 && !sends_0) || (hbusreq_0 && !hready_0 && !sends_0) -> goto T1_S17
	:: (hbusreq_0 && hready_0 && !sends_0) -> goto T3_S17
	:: (!hbusreq_0 && !hready_0 && !hmaster_0 && !sends_0) || (!hbusreq_0 && !hready_0 && hmaster_0 && !hburst1_0 && !sends_0) || (!hbusreq_0 && !hready_0 && hmaster_0 && hburst1_0 && !hmastlock_0 && !sends_0) || (!hbusreq_0 && !hready_0 && hmaster_0 && hburst1_0 && hmastlock_0 && hburst0_0 && !sends_0) -> goto T1_S19
	:: (!hbusreq_0 && hready_0 && hmaster_0 && hburst1_0 && hmastlock_0 && !hburst0_0 && !sends_0) -> goto accept_S17
	fi;
T1_S17:
	if
	:: (!hbusreq_0 && hready_0 && !hmaster_0 && !sends_0) || (!hbusreq_0 && hready_0 && hmaster_0 && !hburst1_0 && !sends_0) || (!hbusreq_0 && hready_0 && hmaster_0 && hburst1_0 && !hmastlock_0 && !sends_0) || (!hbusreq_0 && hready_0 && hmaster_0 && hburst1_0 && hmastlock_0 && hburst0_0 && !sends_0) -> goto accept_S19
	:: (!hbusreq_0 && !hready_0 && hmaster_0 && hburst1_0 && hmastlock_0 && !hburst0_0 && !sends_0) || (hbusreq_0 && !hready_0 && !sends_0) -> goto T1_S17
	:: (hbusreq_0 && hready_0 && !sends_0) -> goto T3_S17
	:: (!hbusreq_0 && !hready_0 && !hmaster_0 && !sends_0) || (!hbusreq_0 && !hready_0 && hmaster_0 && !hburst1_0 && !sends_0) || (!hbusreq_0 && !hready_0 && hmaster_0 && hburst1_0 && !hmastlock_0 && !sends_0) || (!hbusreq_0 && !hready_0 && hmaster_0 && hburst1_0 && hmastlock_0 && hburst0_0 && !sends_0) -> goto T1_S19
	:: (!hbusreq_0 && hready_0 && hmaster_0 && hburst1_0 && hmastlock_0 && !hburst0_0 && !sends_0) -> goto accept_S17
	fi;
T0_S7:
	if
	:: (!hmaster_0) || (hmaster_0 && !hburst1_0) || (hmaster_0 && hburst1_0 && !hmastlock_0) || (hmaster_0 && hburst1_0 && hmastlock_0 && hburst0_0) -> goto T0_S7
	:: (hbusreq_0 && !hmaster_0) -> goto accept_S8
	:: (hmaster_0 && hburst1_0 && hmastlock_0 && !hburst0_0) -> goto T0_S9
	fi;
T0_S9:
	if
	:: (!hbusreq_0 && !hmaster_0) || (!hbusreq_0 && hmaster_0 && !hburst1_0) || (!hbusreq_0 && hmaster_0 && hburst1_0 && !hmastlock_0) || (!hbusreq_0 && hmaster_0 && hburst1_0 && hmastlock_0 && hburst0_0) -> goto T0_S7
	:: (!hbusreq_0 && hmaster_0 && hburst1_0 && hmastlock_0 && !hburst0_0) || (hbusreq_0) -> goto T0_S9
	fi;
accept_S8:
	if
	:: (hbusreq_0 && hready_0 && !hmaster_0 && tok_0) -> goto accept_S8
	:: (hbusreq_0 && !hready_0 && !hmaster_0) -> goto T1_S8
	:: (hbusreq_0 && hready_0 && !hmaster_0 && !tok_0) -> goto T2_S8
	fi;
T2_S8:
	if
	:: (hbusreq_0 && !hmaster_0 && tok_0) -> goto accept_S8
	:: (hbusreq_0 && !hmaster_0 && !tok_0) -> goto T2_S8
	fi;
T1_S8:
	if
	:: (hbusreq_0 && hready_0 && !hmaster_0 && tok_0) -> goto accept_S8
	:: (hbusreq_0 && !hready_0 && !hmaster_0) -> goto T1_S8
	:: (hbusreq_0 && hready_0 && !hmaster_0 && !tok_0) -> goto T2_S8
	fi;
T4_S6:
	if
	:: (!hmaster_0) || (hmaster_0 && !hburst1_0) || (hmaster_0 && hburst1_0 && !hmastlock_0) || (hmaster_0 && hburst1_0 && hmastlock_0 && hburst0_0) -> goto T4_S6
	:: (!hmaster_0 && tok_0 && !sends_0) || (hmaster_0 && tok_0 && !hburst1_0 && !sends_0) || (hmaster_0 && tok_0 && hburst1_0 && !hmastlock_0 && !sends_0) || (hmaster_0 && tok_0 && hburst1_0 && hmastlock_0 && hburst0_0 && !sends_0) -> goto accept_S19
	:: (hmaster_0 && tok_0 && hburst1_0 && hmastlock_0 && !hburst0_0 && !sends_0) -> goto accept_S17
	:: (hmaster_0 && hburst1_0 && hmastlock_0 && !hburst0_0) -> goto T4_S18
	fi;
T4_S18:
	if
	:: (!hbusreq_0 && !hmaster_0) || (!hbusreq_0 && hmaster_0 && !hburst1_0) || (!hbusreq_0 && hmaster_0 && hburst1_0 && !hmastlock_0) || (!hbusreq_0 && hmaster_0 && hburst1_0 && hmastlock_0 && hburst0_0) -> goto T4_S6
	:: (!hbusreq_0 && !hmaster_0 && tok_0 && !sends_0) || (!hbusreq_0 && hmaster_0 && tok_0 && !hburst1_0 && !sends_0) || (!hbusreq_0 && hmaster_0 && tok_0 && hburst1_0 && !hmastlock_0 && !sends_0) || (!hbusreq_0 && hmaster_0 && tok_0 && hburst1_0 && hmastlock_0 && hburst0_0 && !sends_0) -> goto accept_S19
	:: (!hbusreq_0 && hmaster_0 && tok_0 && hburst1_0 && hmastlock_0 && !hburst0_0 && !sends_0) || (hbusreq_0 && tok_0 && !sends_0) -> goto accept_S17
	:: (!hbusreq_0 && hmaster_0 && hburst1_0 && hmastlock_0 && !hburst0_0) || (hbusreq_0) -> goto T4_S18
	fi;
T6_S4:
	if
	:: (1) -> goto T6_S4
	:: (!hready_0 && hburst1_0 && hmastlock_0 && hburst0_0 && start_0) -> goto T5_S21
	fi;
T5_S21:
	if
	:: (start_0) -> goto accept_all
	:: (!hready_0 && !start_0) -> goto T5_S21
	:: (hready_0 && !start_0) -> goto T5_S23
	fi;
T5_S23:
	if
	:: (start_0) -> goto accept_all
	:: (!hready_0 && !start_0) -> goto T5_S23
	:: (hready_0 && !start_0) -> goto T5_S25
	fi;
T5_S25:
	if
	:: (start_0) -> goto accept_all
	:: (!hready_0 && !start_0) -> goto T5_S25
	:: (hready_0 && !start_0) -> goto T5_S27
	fi;
T5_S27:
	if
	:: (start_0) -> goto accept_all
	:: (!hready_0 && !start_0) -> goto T5_S27
	fi;
T8_S3:
	if
	:: (1) -> goto T8_S3
	:: (hready_0 && hburst1_0 && hmastlock_0 && hburst0_0 && start_0) -> goto T5_S23
	fi;
T7_S2:
	if
	:: (1) -> goto T7_S2
	:: (hburst1_0 && hmastlock_0 && !hburst0_0 && start_0) -> goto T5_S35
	fi;
T5_S35:
	if
	:: (start_0) -> goto accept_all
	:: (hbusreq_0 && !start_0) -> goto T5_S35
	fi;
accept_all:
	skip
}

00:07:51  parse_ltl2ba_ba
00:07:51  strengthening properties..
00:07:51  strengthening resulted in safety part (a_s -> g_s):
  (SpecProperty: 
	assumptions=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1)], 
	  guarantees=[Forall(i) G(hready_i=0 * active_i=1 -> X(start_i=0))])  
  (SpecProperty: 
	assumptions=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1)], 
	  guarantees=[Forall(i) G(hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * start_i=1 * active_i=1 -> X(start_i=0 W start_i=0 * hbusreq_i=0 * active_i=1))])  
  (SpecProperty: 
	assumptions=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1)], 
	  guarantees=[Forall(i) G(hmastlock_i=1 * hburst0_i=1 * hburst1_i=1 * start_i=1 * hready_i=1 * active_i=1 -> X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1))))])  
  (SpecProperty: 
	assumptions=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1)], 
	  guarantees=[Forall(i) G(hmastlock_i=1 * hburst0_i=1 * hburst1_i=1 * start_i=1 * hready_i=0 * active_i=1 -> X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1)))))])  
  (SpecProperty: 
	assumptions=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1)], 
	  guarantees=[Forall(i) G(hready_i=1 * active_i=1 -> hgrant_i=1 <-> X(hmaster_i=1))])  
  (SpecProperty: 
	assumptions=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1)], 
	  guarantees=[Forall(i) G(hready_i=1 * active_i=1 -> locked_i=1 <-> X(hmastlock_i=1))])  
  (SpecProperty: 
	assumptions=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1)], 
	  guarantees=[Forall(i) G(X(start_i=0) -> hmaster_i=1 <-> X(hmaster_i=1))])  
  (SpecProperty: 
	assumptions=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1)], 
	  guarantees=[Forall(i) G(X(start_i=0) -> hmastlock_i=1 <-> X(hmastlock_i=1))])  
  (SpecProperty: 
	assumptions=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1)], 
	  guarantees=[Forall(i) G(decide_i=1 * active_i=1 * X(hgrant_i=1) -> hlock_i=1 <-> X(locked_i=1))])  
  (SpecProperty: 
	assumptions=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1)], 
	  guarantees=[Forall(i) G(decide_i=0 * active_i=1 -> hgrant_i=1 <-> X(hgrant_i=1))])  
  (SpecProperty: 
	assumptions=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1)], 
	  guarantees=[Forall(i) G(decide_i=0 * active_i=1 -> locked_i=1 <-> X(locked_i=1))])  
  (SpecProperty: 
	assumptions=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1)], 
	  guarantees=[Forall(i) G(noreq_i=1 * prev_i=1 -> X(hgrant_i=1))])  
  (SpecProperty: 
	assumptions=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1)], 
	  guarantees=[Forall(i) tok_i=1 -> hgrant_i=1 * hmaster_i=1 * hmastlock_i=0])  
  (SpecProperty: 
	assumptions=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1)], 
	  guarantees=[Forall(i) tok_i=0 -> hgrant_i=0 * hmaster_i=0 * hmastlock_i=0])  
  (SpecProperty: 
	assumptions=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1)], 
	  guarantees=[Forall(i) G(hgrant_i=1 -> tok_i=1)])  

00:07:51  ..and in liveness part (a_s&a_l -> g_l):
  (SpecProperty: 
	assumptions=[Forall(i) G(hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * hmaster_i=1 -> X(F(hbusreq_i=0 * active_i=1))) * G(F(hready_i=1 * active_i=1)) * G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) * G(F(fair_scheduling_i=1)) * G(F(tok_i=1))], 
	  guarantees=[Forall(i) G(hbusreq_i=1 -> F(hbusreq_i=0 + hmaster_i=1))])  
  (SpecProperty: 
	assumptions=[Forall(i) G(hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * hmaster_i=1 -> X(F(hbusreq_i=0 * active_i=1))) * G(F(hready_i=1 * active_i=1)) * G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) * G(F(fair_scheduling_i=1))], 
	  guarantees=[Forall(i) G(tok_i=1 -> F(sends_i=1))])  

00:07:51  properties after localizing:
  (SpecProperty: 
	assumptions=[True], 
	  guarantees=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) -> G(hready_i=0 * active_i=1 -> X(start_i=0))])  
  (SpecProperty: 
	assumptions=[True], 
	  guarantees=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) -> G(hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * start_i=1 * active_i=1 -> X(start_i=0 W start_i=0 * hbusreq_i=0 * active_i=1))])  
  (SpecProperty: 
	assumptions=[True], 
	  guarantees=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) -> G(hmastlock_i=1 * hburst0_i=1 * hburst1_i=1 * start_i=1 * hready_i=1 * active_i=1 -> X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1))))])  
  (SpecProperty: 
	assumptions=[True], 
	  guarantees=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) -> G(hmastlock_i=1 * hburst0_i=1 * hburst1_i=1 * start_i=1 * hready_i=0 * active_i=1 -> X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1)))))])  
  (SpecProperty: 
	assumptions=[True], 
	  guarantees=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) -> G(hready_i=1 * active_i=1 -> hgrant_i=1 <-> X(hmaster_i=1))])  
  (SpecProperty: 
	assumptions=[True], 
	  guarantees=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) -> G(hready_i=1 * active_i=1 -> locked_i=1 <-> X(hmastlock_i=1))])  
  (SpecProperty: 
	assumptions=[True], 
	  guarantees=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) -> G(X(start_i=0) -> hmaster_i=1 <-> X(hmaster_i=1))])  
  (SpecProperty: 
	assumptions=[True], 
	  guarantees=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) -> G(X(start_i=0) -> hmastlock_i=1 <-> X(hmastlock_i=1))])  
  (SpecProperty: 
	assumptions=[True], 
	  guarantees=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) -> G(decide_i=1 * active_i=1 * X(hgrant_i=1) -> hlock_i=1 <-> X(locked_i=1))])  
  (SpecProperty: 
	assumptions=[True], 
	  guarantees=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) -> G(decide_i=0 * active_i=1 -> hgrant_i=1 <-> X(hgrant_i=1))])  
  (SpecProperty: 
	assumptions=[True], 
	  guarantees=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) -> G(decide_i=0 * active_i=1 -> locked_i=1 <-> X(locked_i=1))])  
  (SpecProperty: 
	assumptions=[True], 
	  guarantees=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) -> G(noreq_i=1 * prev_i=1 -> X(hgrant_i=1))])  
  (SpecProperty: 
	assumptions=[True], 
	  guarantees=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) -> tok_i=1 -> hgrant_i=1 * hmaster_i=1 * hmastlock_i=0])  
  (SpecProperty: 
	assumptions=[True], 
	  guarantees=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) -> tok_i=0 -> hgrant_i=0 * hmaster_i=0 * hmastlock_i=0])  
  (SpecProperty: 
	assumptions=[True], 
	  guarantees=[Forall(i) G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) -> G(hgrant_i=1 -> tok_i=1)])  
  (SpecProperty: 
	assumptions=[True], 
	  guarantees=[Forall(i) G(hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * hmaster_i=1 -> X(F(hbusreq_i=0 * active_i=1))) * G(F(hready_i=1 * active_i=1)) * G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) * G(F(fair_scheduling_i=1)) * G(F(tok_i=1)) -> G(hbusreq_i=1 -> F(hbusreq_i=0 + hmaster_i=1))])  
  (SpecProperty: 
	assumptions=[True], 
	  guarantees=[Forall(i) G(hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * hmaster_i=1 -> X(F(hbusreq_i=0 * active_i=1))) * G(F(hready_i=1 * active_i=1)) * G(hlock_i=1 -> hbusreq_i=1) * hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hbusreq_i=1 -> noreq_i=0) * G(hburst0_i=1) * G(hburst1_i=1) * G(hbusreq_i=1 -> hlock_i=1) * G(F(fair_scheduling_i=1)) -> G(tok_i=1 -> F(sends_i=1))])  

00:07:51  init_ass [hbusreq_i=0, hlock_i=0, hready_i=0]
00:07:51  init_gua []
00:07:51  saf_ass [G(hlock_i=1 -> hbusreq_i=1), G(hbusreq_i=1 -> noreq_i=0), G(hburst0_i=1), G(hburst1_i=1), G(hbusreq_i=1 -> hlock_i=1)]
00:07:51  saf_gua [G(hready_i=0 * active_i=1 -> X(start_i=0))]
00:07:51  liv_ass []
00:07:51  liv_gua []
00:07:51  saf_part
 []
00:07:51  init_ass [hbusreq_i=0, hlock_i=0, hready_i=0]
00:07:51  init_gua []
00:07:51  saf_ass [G(hlock_i=1 -> hbusreq_i=1), G(hbusreq_i=1 -> noreq_i=0), G(hburst0_i=1), G(hburst1_i=1), G(hbusreq_i=1 -> hlock_i=1)]
00:07:51  saf_gua [G(hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * start_i=1 * active_i=1 -> X(start_i=0 W start_i=0 * hbusreq_i=0 * active_i=1))]
00:07:51  liv_ass []
00:07:51  liv_gua []
00:07:51  Not all safety guarantees are of form G(bool_formulaOneNext). We will treat them with "->". 
 [G(hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * start_i=1 * active_i=1 -> X(start_i=0 W start_i=0 * hbusreq_i=0 * active_i=1))]
00:07:51  saf_part
 [  (SpecProperty: 
	assumptions=[hbusreq_i=0, hlock_i=0, hready_i=0], 
	  guarantees=[G(hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * start_i=1 * active_i=1 -> X(start_i=0 W start_i=0 * hbusreq_i=0 * active_i=1))])  ]
00:07:51  init_ass [hbusreq_i=0, hlock_i=0, hready_i=0]
00:07:51  init_gua []
00:07:51  saf_ass [G(hlock_i=1 -> hbusreq_i=1), G(hbusreq_i=1 -> noreq_i=0), G(hburst0_i=1), G(hburst1_i=1), G(hbusreq_i=1 -> hlock_i=1)]
00:07:51  saf_gua [G(hmastlock_i=1 * hburst0_i=1 * hburst1_i=1 * start_i=1 * hready_i=1 * active_i=1 -> X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1))))]
00:07:51  liv_ass []
00:07:51  liv_gua []
00:07:51  Not all safety guarantees are of form G(bool_formulaOneNext). We will treat them with "->". 
 [G(hmastlock_i=1 * hburst0_i=1 * hburst1_i=1 * start_i=1 * hready_i=1 * active_i=1 -> X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1))))]
00:07:51  saf_part
 [  (SpecProperty: 
	assumptions=[hbusreq_i=0, hlock_i=0, hready_i=0], 
	  guarantees=[G(hmastlock_i=1 * hburst0_i=1 * hburst1_i=1 * start_i=1 * hready_i=1 * active_i=1 -> X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1))))])  ]
00:07:51  init_ass [hbusreq_i=0, hlock_i=0, hready_i=0]
00:07:51  init_gua []
00:07:51  saf_ass [G(hlock_i=1 -> hbusreq_i=1), G(hbusreq_i=1 -> noreq_i=0), G(hburst0_i=1), G(hburst1_i=1), G(hbusreq_i=1 -> hlock_i=1)]
00:07:51  saf_gua [G(hmastlock_i=1 * hburst0_i=1 * hburst1_i=1 * start_i=1 * hready_i=0 * active_i=1 -> X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1)))))]
00:07:51  liv_ass []
00:07:51  liv_gua []
00:07:51  Not all safety guarantees are of form G(bool_formulaOneNext). We will treat them with "->". 
 [G(hmastlock_i=1 * hburst0_i=1 * hburst1_i=1 * start_i=1 * hready_i=0 * active_i=1 -> X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1)))))]
00:07:51  saf_part
 [  (SpecProperty: 
	assumptions=[hbusreq_i=0, hlock_i=0, hready_i=0], 
	  guarantees=[G(hmastlock_i=1 * hburst0_i=1 * hburst1_i=1 * start_i=1 * hready_i=0 * active_i=1 -> X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1)))))])  ]
00:07:51  init_ass [hbusreq_i=0, hlock_i=0, hready_i=0]
00:07:51  init_gua []
00:07:51  saf_ass [G(hlock_i=1 -> hbusreq_i=1), G(hbusreq_i=1 -> noreq_i=0), G(hburst0_i=1), G(hburst1_i=1), G(hbusreq_i=1 -> hlock_i=1)]
00:07:51  saf_gua [G(hready_i=1 * active_i=1 -> hgrant_i=1 <-> X(hmaster_i=1))]
00:07:51  liv_ass []
00:07:51  liv_gua []
00:07:51  saf_part
 []
00:07:51  init_ass [hbusreq_i=0, hlock_i=0, hready_i=0]
00:07:51  init_gua []
00:07:51  saf_ass [G(hlock_i=1 -> hbusreq_i=1), G(hbusreq_i=1 -> noreq_i=0), G(hburst0_i=1), G(hburst1_i=1), G(hbusreq_i=1 -> hlock_i=1)]
00:07:51  saf_gua [G(hready_i=1 * active_i=1 -> locked_i=1 <-> X(hmastlock_i=1))]
00:07:51  liv_ass []
00:07:51  liv_gua []
00:07:51  saf_part
 []
00:07:51  init_ass [hbusreq_i=0, hlock_i=0, hready_i=0]
00:07:51  init_gua []
00:07:51  saf_ass [G(hlock_i=1 -> hbusreq_i=1), G(hbusreq_i=1 -> noreq_i=0), G(hburst0_i=1), G(hburst1_i=1), G(hbusreq_i=1 -> hlock_i=1)]
00:07:51  saf_gua [G(X(start_i=0) -> hmaster_i=1 <-> X(hmaster_i=1))]
00:07:51  liv_ass []
00:07:51  liv_gua []
00:07:51  saf_part
 []
00:07:51  init_ass [hbusreq_i=0, hlock_i=0, hready_i=0]
00:07:51  init_gua []
00:07:51  saf_ass [G(hlock_i=1 -> hbusreq_i=1), G(hbusreq_i=1 -> noreq_i=0), G(hburst0_i=1), G(hburst1_i=1), G(hbusreq_i=1 -> hlock_i=1)]
00:07:51  saf_gua [G(X(start_i=0) -> hmastlock_i=1 <-> X(hmastlock_i=1))]
00:07:51  liv_ass []
00:07:51  liv_gua []
00:07:51  saf_part
 []
00:07:51  init_ass [hbusreq_i=0, hlock_i=0, hready_i=0]
00:07:51  init_gua []
00:07:51  saf_ass [G(hlock_i=1 -> hbusreq_i=1), G(hbusreq_i=1 -> noreq_i=0), G(hburst0_i=1), G(hburst1_i=1), G(hbusreq_i=1 -> hlock_i=1)]
00:07:51  saf_gua [G(decide_i=1 * active_i=1 * X(hgrant_i=1) -> hlock_i=1 <-> X(locked_i=1))]
00:07:51  liv_ass []
00:07:51  liv_gua []
00:07:51  saf_part
 []
00:07:51  init_ass [hbusreq_i=0, hlock_i=0, hready_i=0]
00:07:51  init_gua []
00:07:51  saf_ass [G(hlock_i=1 -> hbusreq_i=1), G(hbusreq_i=1 -> noreq_i=0), G(hburst0_i=1), G(hburst1_i=1), G(hbusreq_i=1 -> hlock_i=1)]
00:07:51  saf_gua [G(decide_i=0 * active_i=1 -> hgrant_i=1 <-> X(hgrant_i=1))]
00:07:51  liv_ass []
00:07:51  liv_gua []
00:07:51  saf_part
 []
00:07:51  init_ass [hbusreq_i=0, hlock_i=0, hready_i=0]
00:07:51  init_gua []
00:07:51  saf_ass [G(hlock_i=1 -> hbusreq_i=1), G(hbusreq_i=1 -> noreq_i=0), G(hburst0_i=1), G(hburst1_i=1), G(hbusreq_i=1 -> hlock_i=1)]
00:07:51  saf_gua [G(decide_i=0 * active_i=1 -> locked_i=1 <-> X(locked_i=1))]
00:07:51  liv_ass []
00:07:51  liv_gua []
00:07:51  saf_part
 []
00:07:51  init_ass [hbusreq_i=0, hlock_i=0, hready_i=0]
00:07:51  init_gua []
00:07:51  saf_ass [G(hlock_i=1 -> hbusreq_i=1), G(hbusreq_i=1 -> noreq_i=0), G(hburst0_i=1), G(hburst1_i=1), G(hbusreq_i=1 -> hlock_i=1)]
00:07:51  saf_gua [G(noreq_i=1 * prev_i=1 -> X(hgrant_i=1))]
00:07:51  liv_ass []
00:07:51  liv_gua []
00:07:51  saf_part
 []
00:07:51  init_ass [hbusreq_i=0, hlock_i=0, hready_i=0]
00:07:51  init_gua [tok_i=1 -> hgrant_i=1 * hmaster_i=1 * hmastlock_i=0]
00:07:51  saf_ass [G(hlock_i=1 -> hbusreq_i=1), G(hbusreq_i=1 -> noreq_i=0), G(hburst0_i=1), G(hburst1_i=1), G(hbusreq_i=1 -> hlock_i=1)]
00:07:51  saf_gua []
00:07:51  liv_ass []
00:07:51  liv_gua []
00:07:51  saf_part
 [  (SpecProperty: 
	assumptions=[hbusreq_i=0, hlock_i=0, hready_i=0], 
	  guarantees=[tok_i=1 -> hgrant_i=1 * hmaster_i=1 * hmastlock_i=0])  ]
00:07:51  init_ass [hbusreq_i=0, hlock_i=0, hready_i=0]
00:07:51  init_gua [tok_i=0 -> hgrant_i=0 * hmaster_i=0 * hmastlock_i=0]
00:07:51  saf_ass [G(hlock_i=1 -> hbusreq_i=1), G(hbusreq_i=1 -> noreq_i=0), G(hburst0_i=1), G(hburst1_i=1), G(hbusreq_i=1 -> hlock_i=1)]
00:07:51  saf_gua []
00:07:51  liv_ass []
00:07:51  liv_gua []
00:07:51  saf_part
 [  (SpecProperty: 
	assumptions=[hbusreq_i=0, hlock_i=0, hready_i=0], 
	  guarantees=[tok_i=0 -> hgrant_i=0 * hmaster_i=0 * hmastlock_i=0])  ]
00:07:51  init_ass [hbusreq_i=0, hlock_i=0, hready_i=0]
00:07:51  init_gua []
00:07:51  saf_ass [G(hlock_i=1 -> hbusreq_i=1), G(hbusreq_i=1 -> noreq_i=0), G(hburst0_i=1), G(hburst1_i=1), G(hbusreq_i=1 -> hlock_i=1)]
00:07:51  saf_gua [G(hgrant_i=1 -> tok_i=1)]
00:07:51  liv_ass []
00:07:51  liv_gua []
00:07:51  saf_part
 []
00:07:51  init_ass [hbusreq_i=0, hlock_i=0, hready_i=0]
00:07:51  init_gua []
00:07:51  saf_ass [G(hlock_i=1 -> hbusreq_i=1), G(hbusreq_i=1 -> noreq_i=0), G(hburst0_i=1), G(hburst1_i=1), G(hbusreq_i=1 -> hlock_i=1)]
00:07:51  saf_gua []
00:07:51  liv_ass [G(hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * hmaster_i=1 -> X(F(hbusreq_i=0 * active_i=1))), G(F(hready_i=1 * active_i=1)), G(F(fair_scheduling_i=1)), G(F(tok_i=1))]
00:07:51  liv_gua [G(hbusreq_i=1 -> F(hbusreq_i=0 + hmaster_i=1))]
00:07:51  saf_part
 []
00:07:51  liv_part
   (SpecProperty: 
	assumptions=[hbusreq_i=0, hlock_i=0, hready_i=0, G(hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * hmaster_i=1 -> X(F(hbusreq_i=0 * active_i=1))), G(F(hready_i=1 * active_i=1)), G(F(fair_scheduling_i=1)), G(F(tok_i=1))], 
	  guarantees=[G(hbusreq_i=1 -> F(hbusreq_i=0 + hmaster_i=1))])  
00:07:51  init_ass [hbusreq_i=0, hlock_i=0, hready_i=0]
00:07:51  init_gua []
00:07:51  saf_ass [G(hlock_i=1 -> hbusreq_i=1), G(hbusreq_i=1 -> noreq_i=0), G(hburst0_i=1), G(hburst1_i=1), G(hbusreq_i=1 -> hlock_i=1)]
00:07:51  saf_gua []
00:07:51  liv_ass [G(hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * hmaster_i=1 -> X(F(hbusreq_i=0 * active_i=1))), G(F(hready_i=1 * active_i=1)), G(F(fair_scheduling_i=1))]
00:07:51  liv_gua [G(tok_i=1 -> F(sends_i=1))]
00:07:51  saf_part
 []
00:07:51  liv_part
   (SpecProperty: 
	assumptions=[hbusreq_i=0, hlock_i=0, hready_i=0, G(hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * hmaster_i=1 -> X(F(hbusreq_i=0 * active_i=1))), G(F(hready_i=1 * active_i=1)), G(F(fair_scheduling_i=1))], 
	  guarantees=[G(tok_i=1 -> F(sends_i=1))])  
[32m<name: env_ass, inputs: [(hburst0_0, 'Bool'), (hburst1_0, 'Bool'), (hbusreq_0, 'Bool'), (hlock_0, 'Bool'), (noreq_0, 'Bool')], output: Bool, definition: 
(define-fun env_ass ((hburst0_0 Bool) (hburst1_0 Bool) (hbusreq_0 Bool) (hlock_0 Bool) (noreq_0 Bool)) Bool 
(and (and (and (and (=> hbusreq_0 (not noreq_0)) hburst1_0) (=> hlock_0 hbusreq_0)) (=> hbusreq_0 hlock_0)) hburst0_0)
)>
[31m<name: sys_gua, inputs: [(decideNext_0, 'Bool'), (decide_0, 'Bool'), (hgrantNext_0, 'Bool'), (hgrant_0, 'Bool'), (hlockNext_0, 'Bool'), (hlock_0, 'Bool'), (hmasterNext_0, 'Bool'), (hmaster_0, 'Bool'), (hmastlockNext_0, 'Bool'), (hmastlock_0, 'Bool'), (hreadyNext_0, 'Bool'), (hready_0, 'Bool'), (lockedNext_0, 'Bool'), (locked_0, 'Bool'), (noreqNext_0, 'Bool'), (noreq_0, 'Bool'), (prevNext_0, 'Bool'), (prev_0, 'Bool'), (startNext_0, 'Bool'), (start_0, 'Bool'), (tokNext_0, 'Bool'), (tok_0, 'Bool')], output: Bool, definition: 
(define-fun sys_gua ((decideNext_0 Bool) (decide_0 Bool) (hgrantNext_0 Bool) (hgrant_0 Bool) (hlockNext_0 Bool) (hlock_0 Bool) (hmasterNext_0 Bool) (hmaster_0 Bool) (hmastlockNext_0 Bool) (hmastlock_0 Bool) (hreadyNext_0 Bool) (hready_0 Bool) (lockedNext_0 Bool) (locked_0 Bool) (noreqNext_0 Bool) (noreq_0 Bool) (prevNext_0 Bool) (prev_0 Bool) (startNext_0 Bool) (start_0 Bool) (tokNext_0 Bool) (tok_0 Bool)) Bool 
(and (and (and (and (and (and (and (and (and (=> (and (not decide_0)  true ) (= locked_0 lockedNext_0)) (=> (and hready_0  true ) (= locked_0 hmastlockNext_0))) (=> (and hready_0  true ) (= hgrant_0 hmasterNext_0))) (=> (not startNext_0) (= hmaster_0 hmasterNext_0))) (=> (and (not hready_0)  true ) (not startNext_0))) (=> (and (and decide_0  true ) hgrantNext_0) (= hlock_0 lockedNext_0))) (=> (not startNext_0) (= hmastlock_0 hmastlockNext_0))) (=> hgrant_0 tok_0)) (=> (and (not decide_0)  true ) (= hgrant_0 hgrantNext_0))) (=> (and noreq_0 prev_0) hgrantNext_0))
)>
00:07:51  properties after weak-until optimization 
 [  (SpecProperty: 
	assumptions=[], 
	  guarantees=[Forall(i) hbusreq_i=0 * hlock_i=0 * hready_i=0 -> G(hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * start_i=1 * active_i=1 -> X(start_i=0 W start_i=0 * hbusreq_i=0 * active_i=1))])  ,   (SpecProperty: 
	assumptions=[], 
	  guarantees=[Forall(i) hbusreq_i=0 * hlock_i=0 * hready_i=0 -> G(hmastlock_i=1 * hburst0_i=1 * hburst1_i=1 * start_i=1 * hready_i=1 * active_i=1 -> X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1))))])  ,   (SpecProperty: 
	assumptions=[], 
	  guarantees=[Forall(i) hbusreq_i=0 * hlock_i=0 * hready_i=0 -> G(hmastlock_i=1 * hburst0_i=1 * hburst1_i=1 * start_i=1 * hready_i=0 * active_i=1 -> X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1 * X(start_i=0 W start_i=0 * hready_i=1 * active_i=1)))))])  ,   (SpecProperty: 
	assumptions=[], 
	  guarantees=[Forall(i) hbusreq_i=0 * hlock_i=0 * hready_i=0 -> tok_i=1 -> hgrant_i=1 * hmaster_i=1 * hmastlock_i=0])  ,   (SpecProperty: 
	assumptions=[], 
	  guarantees=[Forall(i) hbusreq_i=0 * hlock_i=0 * hready_i=0 -> tok_i=0 -> hgrant_i=0 * hmaster_i=0 * hmastlock_i=0])  ,   (SpecProperty: 
	assumptions=[], 
	  guarantees=[Forall(i) hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * hmaster_i=1 -> X(F(hbusreq_i=0 * active_i=1))) * G(F(hready_i=1 * active_i=1)) * G(F(fair_scheduling_i=1)) * G(F(tok_i=1)) -> G(hbusreq_i=1 -> F(hbusreq_i=0 + hmaster_i=1))])  ,   (SpecProperty: 
	assumptions=[], 
	  guarantees=[Forall(i) hbusreq_i=0 * hlock_i=0 * hready_i=0 * G(hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * hmaster_i=1 -> X(F(hbusreq_i=0 * active_i=1))) * G(F(hready_i=1 * active_i=1)) * G(F(fair_scheduling_i=1)) -> G(tok_i=1 -> F(sends_i=1))])  ] 

00:07:51  instantiated local properties:
[  (SpecProperty: 
	assumptions=[], 
	  guarantees=[hbusreq_0=0 * hlock_0=0 * hready_0=0 -> G(hmastlock_0=1 * hburst0_0=0 * hburst1_0=1 * start_0=1 * True -> X(start_0=0 W start_0=0 * hbusreq_0=0 * True))])  ,   (SpecProperty: 
	assumptions=[], 
	  guarantees=[hbusreq_0=0 * hlock_0=0 * hready_0=0 -> G(hmastlock_0=1 * hburst0_0=1 * hburst1_0=1 * start_0=1 * hready_0=1 * True -> X(start_0=0 W start_0=0 * hready_0=1 * True * X(start_0=0 W start_0=0 * hready_0=1 * True * X(start_0=0 W start_0=0 * hready_0=1 * True))))])  ,   (SpecProperty: 
	assumptions=[], 
	  guarantees=[hbusreq_0=0 * hlock_0=0 * hready_0=0 -> G(hmastlock_0=1 * hburst0_0=1 * hburst1_0=1 * start_0=1 * hready_0=0 * True -> X(start_0=0 W start_0=0 * hready_0=1 * True * X(start_0=0 W start_0=0 * hready_0=1 * True * X(start_0=0 W start_0=0 * hready_0=1 * True * X(start_0=0 W start_0=0 * hready_0=1 * True)))))])  ,   (SpecProperty: 
	assumptions=[], 
	  guarantees=[hbusreq_0=0 * hlock_0=0 * hready_0=0 -> tok_0=1 -> hgrant_0=1 * hmaster_0=1 * hmastlock_0=0])  ,   (SpecProperty: 
	assumptions=[], 
	  guarantees=[hbusreq_0=0 * hlock_0=0 * hready_0=0 -> tok_0=0 -> hgrant_0=0 * hmaster_0=0 * hmastlock_0=0])  ,   (SpecProperty: 
	assumptions=[], 
	  guarantees=[hbusreq_0=0 * hlock_0=0 * hready_0=0 * G(hmastlock_0=1 * hburst0_0=0 * hburst1_0=1 * hmaster_0=1 -> X(F(hbusreq_0=0 * True))) * G(F(hready_0=1 * True)) * G(F(True)) * G(F(tok_0=1)) -> G(hbusreq_0=1 -> F(hbusreq_0=0 + hmaster_0=1))])  ,   (SpecProperty: 
	assumptions=[], 
	  guarantees=[hbusreq_0=0 * hlock_0=0 * hready_0=0 * G(hmastlock_0=1 * hburst0_0=0 * hburst1_0=1 * hmaster_0=1 -> X(F(hbusreq_0=0 * True))) * G(F(hready_0=1 * True)) * G(F(True)) -> G(tok_0=1 -> F(sends_0=1))])  ]

00:07:51  instantiated global properties:
[]

00:07:51  current cutoff = 9223372036854775807
00:07:51  # of global automatae 0
00:07:51  local automaton !((true) -> ((((((((true) -> ((((!hbusreq_0) && (!hlock_0)) && (!hready_0)) -> (G((((((hmastlock_0) && (!hburst0_0)) && (hburst1_0)) && (start_0)) && (true)) -> (X(((!start_0) U (((!start_0) && (!hbusreq_0)) && (true))) || (G(!start_0)))))))) && ((true) -> ((((!hbusreq_0) && (!hlock_0)) && (!hready_0)) -> (G(((((((hmastlock_0) && (hburst0_0)) && (hburst1_0)) && (start_0)) && (hready_0)) && (true)) -> (X(((!start_0) U ((((!start_0) && (hready_0)) && (true)) && (X(((!start_0) U ((((!start_0) && (hready_0)) && (true)) && (X(((!start_0) U (((!start_0) && (hready_0)) && (true))) || (G(!start_0)))))) || (G(!start_0)))))) || (G(!start_0))))))))) && ((true) -> ((((!hbusreq_0) && (!hlock_0)) && (!hready_0)) -> (G(((((((hmastlock_0) && (hburst0_0)) && (hburst1_0)) && (start_0)) && (!hready_0)) && (true)) -> (X(((!start_0) U ((((!start_0) && (hready_0)) && (true)) && (X(((!start_0) U ((((!start_0) && (hready_0)) && (true)) && (X(((!start_0) U ((((!start_0) && (hready_0)) && (true)) && (X(((!start_0) U (((!start_0) && (hready_0)) && (true))) || (G(!start_0)))))) || (G(!start_0)))))) || (G(!start_0)))))) || (G(!start_0))))))))) && ((true) -> ((((!hbusreq_0) && (!hlock_0)) && (!hready_0)) -> ((tok_0) -> (((hgrant_0) && (hmaster_0)) && (!hmastlock_0)))))) && ((true) -> ((((!hbusreq_0) && (!hlock_0)) && (!hready_0)) -> ((!tok_0) -> (((!hgrant_0) && (!hmaster_0)) && (!hmastlock_0)))))) && ((true) -> ((((((((!hbusreq_0) && (!hlock_0)) && (!hready_0)) && (G(((((hmastlock_0) && (!hburst0_0)) && (hburst1_0)) && (hmaster_0)) -> (X(F((!hbusreq_0) && (true))))))) && (G(F((hready_0) && (true))))) && (G(F(true)))) && (G(F(tok_0)))) -> (G((hbusreq_0) -> (F((!hbusreq_0) || (hmaster_0)))))))) && ((true) -> (((((((!hbusreq_0) && (!hlock_0)) && (!hready_0)) && (G(((((hmastlock_0) && (!hburst0_0)) && (hburst1_0)) && (hmaster_0)) -> (X(F((!hbusreq_0) && (true))))))) && (G(F((hready_0) && (true))))) && (G(F(true)))) -> (G((tok_0) -> (F(sends_0))))))))
00:07:51  nof_nodes=22
00:07:51  .. corresponding dot:
digraph "automaton" {
rankdir=LR;
"T0_init" [shape=box]


"accept_S8" [shape=doublecircle]
"accept_S19" [shape=doublecircle]
"accept_all" [shape=doublecircle]
"accept_S17" [shape=doublecircle]


"accept_S8" -> "T1_S8" [color=black, label="!hready_0.hbusreq_0.!hmaster_0", arrowhead="normal"];


"accept_S8" -> "accept_S8" [color=purple, label="hready_0.hbusreq_0.!hmaster_0.tok_0", arrowhead="normalnormal"];


"accept_S8" -> "T2_S8" [color=green, label="hready_0.hbusreq_0.!hmaster_0.!tok_0", arrowhead="normal"];


"T4_S18" -> "accept_S19" [color=black, label="hmastlock_0.hburst0_0.!hbusreq_0.!sends_0.hmaster_0.tok_0.hburst1_0", arrowhead="normalnormal"];


"T4_S18" -> "accept_S19" [color=purple, label="!hmastlock_0.!hbusreq_0.hburst1_0.hmaster_0.tok_0.!sends_0", arrowhead="normalnormal"];


"T4_S18" -> "T4_S6" [color=green, label="!hbusreq_0.!hmastlock_0.hmaster_0.hburst1_0", arrowhead="normal"];


"T4_S18" -> "T4_S6" [color=yellow, label="!hbusreq_0.hmastlock_0.hmaster_0.hburst0_0.hburst1_0", arrowhead="normal"];


"T4_S18" -> "T4_S6" [color=blue, label="!hbusreq_0.hmaster_0.!hburst1_0", arrowhead="normal"];


"T4_S18" -> "T4_S6" [color=orange, label="!hbusreq_0.!hmaster_0", arrowhead="normal"];


"T4_S18" -> "accept_S19" [color=red, label="!hbusreq_0.!sends_0.hmaster_0.tok_0.!hburst1_0", arrowhead="normalnormal"];


"T4_S18" -> "T4_S18" [color=brown, label="hbusreq_0", arrowhead="normal"];


"T4_S18" -> "T4_S18" [color=pink, label="!hbusreq_0.hmastlock_0.hmaster_0.!hburst0_0.hburst1_0", arrowhead="normal"];


"T4_S18" -> "accept_S19" [color=gray, label="!hbusreq_0.!hmaster_0.tok_0.!sends_0", arrowhead="normalnormal"];


"T4_S18" -> "accept_S17" [color=gray, label="hbusreq_0.tok_0.!sends_0", arrowhead="normalnormal"];


"T4_S18" -> "accept_S17" [color=gray, label="hmastlock_0.!hburst0_0.!hbusreq_0.!sends_0.hmaster_0.tok_0.hburst1_0", arrowhead="normalnormal"];


"T5_S21" -> "T5_S21" [color=black, label="!hready_0.!start_0", arrowhead="normal"];


"T5_S21" -> "T5_S23" [color=purple, label="hready_0.!start_0", arrowhead="normal"];


"T5_S21" -> "accept_all" [color=green, label="start_0", arrowhead="normalnormal"];


"T5_S35" -> "T5_S35" [color=black, label="hbusreq_0.!start_0", arrowhead="normal"];


"T5_S35" -> "accept_all" [color=purple, label="start_0", arrowhead="normalnormal"];


"T2_S8" -> "accept_S8" [color=black, label="hbusreq_0.!hmaster_0.tok_0", arrowhead="normalnormal"];


"T2_S8" -> "T2_S8" [color=purple, label="hbusreq_0.!hmaster_0.!tok_0", arrowhead="normal"];


"accept_S19" -> "accept_S19" [color=black, label="hready_0.!hmaster_0.!sends_0", arrowhead="normalnormal"];


"accept_S19" -> "T1_S19" [color=purple, label="hmastlock_0.hburst0_0.!hready_0.hmaster_0.hburst1_0.!sends_0", arrowhead="normal"];


"accept_S19" -> "T1_S19" [color=green, label="!hready_0.hmaster_0.!sends_0.!hburst1_0", arrowhead="normal"];


"accept_S19" -> "accept_S19" [color=yellow, label="hready_0.hmaster_0.!sends_0.!hburst1_0", arrowhead="normalnormal"];


"accept_S19" -> "T1_S17" [color=blue, label="hmastlock_0.!hburst0_0.!hready_0.hmaster_0.hburst1_0.!sends_0", arrowhead="normal"];


"accept_S19" -> "accept_S19" [color=orange, label="hmastlock_0.hburst0_0.hready_0.hmaster_0.hburst1_0.!sends_0", arrowhead="normalnormal"];


"accept_S19" -> "accept_S19" [color=red, label="hready_0.hmaster_0.!sends_0.!hmastlock_0.hburst1_0", arrowhead="normalnormal"];


"accept_S19" -> "T3_S17" [color=brown, label="hmastlock_0.!hburst0_0.hready_0.hmaster_0.hburst1_0.!sends_0", arrowhead="normal"];


"accept_S19" -> "T1_S19" [color=pink, label="!hready_0.!hmaster_0.!sends_0", arrowhead="normal"];


"accept_S19" -> "T1_S19" [color=gray, label="!hready_0.hmaster_0.!sends_0.!hmastlock_0.hburst1_0", arrowhead="normal"];


"T4_S6" -> "T4_S18" [color=black, label="hmaster_0.hmastlock_0.!hburst0_0.hburst1_0", arrowhead="normal"];


"T4_S6" -> "T4_S6" [color=purple, label="hmaster_0.hmastlock_0.hburst0_0.hburst1_0", arrowhead="normal"];


"T4_S6" -> "accept_S19" [color=green, label="hmaster_0.!sends_0.tok_0.!hburst1_0", arrowhead="normalnormal"];


"T4_S6" -> "accept_S19" [color=yellow, label="hmastlock_0.hburst0_0.hmaster_0.hburst1_0.tok_0.!sends_0", arrowhead="normalnormal"];


"T4_S6" -> "accept_S17" [color=blue, label="hmastlock_0.!hburst0_0.hmaster_0.hburst1_0.tok_0.!sends_0", arrowhead="normalnormal"];


"T4_S6" -> "accept_S19" [color=orange, label="hmaster_0.!sends_0.!hmastlock_0.tok_0.hburst1_0", arrowhead="normalnormal"];


"T4_S6" -> "T4_S6" [color=red, label="!hmaster_0", arrowhead="normal"];


"T4_S6" -> "T4_S6" [color=brown, label="hmaster_0.!hburst1_0", arrowhead="normal"];


"T4_S6" -> "T4_S6" [color=pink, label="hmaster_0.!hmastlock_0.hburst1_0", arrowhead="normal"];


"T4_S6" -> "accept_S19" [color=gray, label="!hmaster_0.tok_0.!sends_0", arrowhead="normalnormal"];


"accept_S17" -> "T1_S17" [color=black, label="!hready_0.hbusreq_0.!sends_0", arrowhead="normal"];


"accept_S17" -> "T1_S19" [color=purple, label="!hready_0.!hbusreq_0.!hmaster_0.!sends_0", arrowhead="normal"];


"accept_S17" -> "accept_S19" [color=green, label="hready_0.!hbusreq_0.!hmaster_0.!sends_0", arrowhead="normalnormal"];


"accept_S17" -> "accept_S17" [color=yellow, label="hmastlock_0.!hburst0_0.hready_0.!hbusreq_0.!sends_0.hmaster_0.hburst1_0", arrowhead="normalnormal"];


"accept_S17" -> "T1_S17" [color=blue, label="hmastlock_0.!hburst0_0.!hready_0.!hbusreq_0.!sends_0.hmaster_0.hburst1_0", arrowhead="normal"];


"accept_S17" -> "accept_S19" [color=orange, label="hready_0.!hbusreq_0.!sends_0.hmaster_0.!hburst1_0", arrowhead="normalnormal"];


"accept_S17" -> "accept_S19" [color=red, label="hmastlock_0.hburst0_0.hready_0.!hbusreq_0.!sends_0.hmaster_0.hburst1_0", arrowhead="normalnormal"];


"accept_S17" -> "accept_S19" [color=brown, label="!hmastlock_0.hready_0.!hbusreq_0.hburst1_0.hmaster_0.!sends_0", arrowhead="normalnormal"];


"accept_S17" -> "T1_S19" [color=pink, label="!hmastlock_0.!hready_0.!hbusreq_0.hburst1_0.hmaster_0.!sends_0", arrowhead="normal"];


"accept_S17" -> "T1_S19" [color=gray, label="hmastlock_0.hburst0_0.!hready_0.!hbusreq_0.!sends_0.hmaster_0.hburst1_0", arrowhead="normal"];


"accept_S17" -> "T3_S17" [color=gray, label="hready_0.hbusreq_0.!sends_0", arrowhead="normal"];


"accept_S17" -> "T1_S19" [color=gray, label="!hready_0.!hbusreq_0.!sends_0.hmaster_0.!hburst1_0", arrowhead="normal"];


"T0_S9" -> "T0_S9" [color=black, label="!hbusreq_0.hmastlock_0.hmaster_0.!hburst0_0.hburst1_0", arrowhead="normal"];


"T0_S9" -> "T0_S7" [color=purple, label="!hbusreq_0.hmastlock_0.hmaster_0.hburst0_0.hburst1_0", arrowhead="normal"];


"T0_S9" -> "T0_S7" [color=green, label="!hbusreq_0.!hmastlock_0.hmaster_0.hburst1_0", arrowhead="normal"];


"T0_S9" -> "T0_S7" [color=yellow, label="!hbusreq_0.hmaster_0.!hburst1_0", arrowhead="normal"];


"T0_S9" -> "T0_S7" [color=blue, label="!hbusreq_0.!hmaster_0", arrowhead="normal"];


"T0_S9" -> "T0_S9" [color=orange, label="hbusreq_0", arrowhead="normal"];


"T7_S2" -> "T5_S35" [color=black, label="hmastlock_0.start_0.!hburst0_0.hburst1_0", arrowhead="normal"];


"T7_S2" -> "T7_S2" [color=purple, label="1", arrowhead="normal"];


"T8_S3" -> "T5_S23" [color=black, label="hready_0.hmastlock_0.start_0.hburst0_0.hburst1_0", arrowhead="normal"];


"T8_S3" -> "T8_S3" [color=purple, label="1", arrowhead="normal"];


"T0_S7" -> "T0_S7" [color=black, label="hmaster_0.!hburst1_0", arrowhead="normal"];


"T0_S7" -> "T0_S7" [color=purple, label="hmaster_0.hmastlock_0.hburst0_0.hburst1_0", arrowhead="normal"];


"T0_S7" -> "T0_S9" [color=green, label="hmaster_0.hmastlock_0.!hburst0_0.hburst1_0", arrowhead="normal"];


"T0_S7" -> "accept_S8" [color=yellow, label="hbusreq_0.!hmaster_0", arrowhead="normalnormal"];


"T0_S7" -> "T0_S7" [color=blue, label="hmaster_0.!hmastlock_0.hburst1_0", arrowhead="normal"];


"T0_S7" -> "T0_S7" [color=orange, label="!hmaster_0", arrowhead="normal"];


"accept_all" -> "accept_all" [color=black, label="1", arrowhead="normalnormal"];


"T3_S17" -> "T3_S17" [color=black, label="hbusreq_0.!sends_0", arrowhead="normal"];


"T3_S17" -> "accept_S19" [color=purple, label="hmastlock_0.hburst0_0.!hbusreq_0.hburst1_0.hmaster_0.!sends_0", arrowhead="normalnormal"];


"T3_S17" -> "accept_S19" [color=green, label="!hbusreq_0.!sends_0.hmaster_0.!hburst1_0", arrowhead="normalnormal"];


"T3_S17" -> "accept_S17" [color=yellow, label="hmastlock_0.!hburst0_0.!hbusreq_0.hburst1_0.hmaster_0.!sends_0", arrowhead="normalnormal"];


"T3_S17" -> "accept_S19" [color=blue, label="!hbusreq_0.!hmaster_0.!sends_0", arrowhead="normalnormal"];


"T3_S17" -> "accept_S19" [color=orange, label="!hbusreq_0.!sends_0.!hmastlock_0.hmaster_0.hburst1_0", arrowhead="normalnormal"];


"T5_S23" -> "T5_S23" [color=black, label="!hready_0.!start_0", arrowhead="normal"];


"T5_S23" -> "T5_S25" [color=purple, label="hready_0.!start_0", arrowhead="normal"];


"T5_S23" -> "accept_all" [color=green, label="start_0", arrowhead="normalnormal"];


"T1_S8" -> "T1_S8" [color=black, label="!hready_0.hbusreq_0.!hmaster_0", arrowhead="normal"];


"T1_S8" -> "accept_S8" [color=purple, label="hready_0.hbusreq_0.!hmaster_0.tok_0", arrowhead="normalnormal"];


"T1_S8" -> "T2_S8" [color=green, label="hready_0.hbusreq_0.!hmaster_0.!tok_0", arrowhead="normal"];


"T1_S19" -> "accept_S19" [color=black, label="hready_0.!hmaster_0.!sends_0", arrowhead="normalnormal"];


"T1_S19" -> "T1_S19" [color=purple, label="hmastlock_0.hburst0_0.!hready_0.hmaster_0.hburst1_0.!sends_0", arrowhead="normal"];


"T1_S19" -> "T1_S19" [color=green, label="!hready_0.hmaster_0.!sends_0.!hburst1_0", arrowhead="normal"];


"T1_S19" -> "accept_S19" [color=yellow, label="hready_0.hmaster_0.!sends_0.!hburst1_0", arrowhead="normalnormal"];


"T1_S19" -> "T1_S17" [color=blue, label="hmastlock_0.!hburst0_0.!hready_0.hmaster_0.hburst1_0.!sends_0", arrowhead="normal"];


"T1_S19" -> "accept_S19" [color=orange, label="hmastlock_0.hburst0_0.hready_0.hmaster_0.hburst1_0.!sends_0", arrowhead="normalnormal"];


"T1_S19" -> "accept_S19" [color=red, label="hready_0.hmaster_0.!sends_0.!hmastlock_0.hburst1_0", arrowhead="normalnormal"];


"T1_S19" -> "T3_S17" [color=brown, label="hmastlock_0.!hburst0_0.hready_0.hmaster_0.hburst1_0.!sends_0", arrowhead="normal"];


"T1_S19" -> "T1_S19" [color=pink, label="!hready_0.!hmaster_0.!sends_0", arrowhead="normal"];


"T1_S19" -> "T1_S19" [color=gray, label="!hready_0.hmaster_0.!sends_0.!hmastlock_0.hburst1_0", arrowhead="normal"];


"T0_init" -> "accept_all" [color=black, label="hmastlock_0.!hlock_0.!hready_0.!hbusreq_0.!hmaster_0.!tok_0", arrowhead="normalnormal"];


"T0_init" -> "accept_all" [color=purple, label="hmastlock_0.!hlock_0.!hready_0.!hbusreq_0.hmaster_0.tok_0", arrowhead="normalnormal"];


"T0_init" -> "accept_all" [color=green, label="!hmastlock_0.!hlock_0.!hready_0.!hbusreq_0.!hgrant_0.hmaster_0.tok_0", arrowhead="normalnormal"];


"T0_init" -> "T4_S6" [color=yellow, label="!hmastlock_0.!hlock_0.!hready_0.!hbusreq_0.hgrant_0.hmaster_0.tok_0", arrowhead="normal"];
"T0_init" -> "T7_S2" [color=yellow, arrowhead="normal"];
"T0_init" -> "T0_S7" [color=yellow, arrowhead="normal"];
"T0_init" -> "T8_S3" [color=yellow, arrowhead="normal"];
"T0_init" -> "T6_S4" [color=yellow, arrowhead="normal"];


"T0_init" -> "accept_all" [color=blue, label="!hready_0.!hbusreq_0.!hmaster_0.tok_0.!hlock_0", arrowhead="normalnormal"];


"T0_init" -> "T4_S6" [color=orange, label="!hmastlock_0.!hlock_0.!hready_0.!hbusreq_0.!hgrant_0.!hmaster_0.!tok_0", arrowhead="normal"];
"T0_init" -> "T7_S2" [color=orange, arrowhead="normal"];
"T0_init" -> "T0_S7" [color=orange, arrowhead="normal"];
"T0_init" -> "T8_S3" [color=orange, arrowhead="normal"];
"T0_init" -> "T6_S4" [color=orange, arrowhead="normal"];


"T0_init" -> "accept_all" [color=red, label="!hmastlock_0.!hlock_0.!hready_0.!hbusreq_0.hgrant_0.!hmaster_0.!tok_0", arrowhead="normalnormal"];


"T0_init" -> "accept_S19" [color=brown, label="!hlock_0.!hready_0.!hbusreq_0.tok_0.!hmastlock_0.hmaster_0.hgrant_0.!sends_0", arrowhead="normalnormal"];


"T0_init" -> "accept_all" [color=pink, label="!hready_0.!hbusreq_0.hmaster_0.!tok_0.!hlock_0", arrowhead="normalnormal"];


"T1_S17" -> "T1_S17" [color=black, label="!hready_0.hbusreq_0.!sends_0", arrowhead="normal"];


"T1_S17" -> "T1_S19" [color=purple, label="!hready_0.!hbusreq_0.!hmaster_0.!sends_0", arrowhead="normal"];


"T1_S17" -> "accept_S19" [color=green, label="hready_0.!hbusreq_0.!hmaster_0.!sends_0", arrowhead="normalnormal"];


"T1_S17" -> "accept_S17" [color=yellow, label="hmastlock_0.!hburst0_0.hready_0.!hbusreq_0.!sends_0.hmaster_0.hburst1_0", arrowhead="normalnormal"];


"T1_S17" -> "T1_S17" [color=blue, label="hmastlock_0.!hburst0_0.!hready_0.!hbusreq_0.!sends_0.hmaster_0.hburst1_0", arrowhead="normal"];


"T1_S17" -> "accept_S19" [color=orange, label="hready_0.!hbusreq_0.!sends_0.hmaster_0.!hburst1_0", arrowhead="normalnormal"];


"T1_S17" -> "accept_S19" [color=red, label="hmastlock_0.hburst0_0.hready_0.!hbusreq_0.!sends_0.hmaster_0.hburst1_0", arrowhead="normalnormal"];


"T1_S17" -> "accept_S19" [color=brown, label="!hmastlock_0.hready_0.!hbusreq_0.hburst1_0.hmaster_0.!sends_0", arrowhead="normalnormal"];


"T1_S17" -> "T1_S19" [color=pink, label="!hmastlock_0.!hready_0.!hbusreq_0.hburst1_0.hmaster_0.!sends_0", arrowhead="normal"];


"T1_S17" -> "T1_S19" [color=gray, label="hmastlock_0.hburst0_0.!hready_0.!hbusreq_0.!sends_0.hmaster_0.hburst1_0", arrowhead="normal"];


"T1_S17" -> "T3_S17" [color=gray, label="hready_0.hbusreq_0.!sends_0", arrowhead="normal"];


"T1_S17" -> "T1_S19" [color=gray, label="!hready_0.!hbusreq_0.!sends_0.hmaster_0.!hburst1_0", arrowhead="normal"];


"T5_S25" -> "T5_S25" [color=black, label="!hready_0.!start_0", arrowhead="normal"];


"T5_S25" -> "T5_S27" [color=purple, label="hready_0.!start_0", arrowhead="normal"];


"T5_S25" -> "accept_all" [color=green, label="start_0", arrowhead="normalnormal"];


"T6_S4" -> "T5_S21" [color=black, label="!hready_0.hmastlock_0.start_0.hburst0_0.hburst1_0", arrowhead="normal"];


"T6_S4" -> "T6_S4" [color=purple, label="1", arrowhead="normal"];


"T5_S27" -> "T5_S27" [color=black, label="!hready_0.!start_0", arrowhead="normal"];


"T5_S27" -> "accept_all" [color=purple, label="start_0", arrowhead="normalnormal"];


}
00:07:51  

00:07:51  search
00:07:51  trying size 12
00:07:51  solving /home/art_haali/projects/party/src/zero-process/tmp_ofxde.smt2
